{"ast":null,"code":"var _jsxFileName = \"/Users/alextsukanov/my-projects/chess/src/components/board/board.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, Fragment, useCallback } from 'react';\nimport './board.css';\nimport CellComponent from '../cell/cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cn = 'board';\n\nconst BoardComponent = _ref => {\n  _s();\n\n  let {\n    board,\n    setBoard\n  } = _ref;\n  const [selectedCell, setSelectedCell] = useState(null);\n  console.log(selectedCell);\n  const clickCellHandler = useCallback(cell => {\n    if ((selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) === cell.x && selectedCell.y === cell.y) {\n      console.log('HERE');\n      setSelectedCell(null); // return;\n    }\n\n    setSelectedCell(cell.currentFigure ? cell : null);\n    board.lightenAvailableCells(cell);\n  }, [board, selectedCell]);\n  const boardFinal = useMemo(() => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: board.cells.map((row, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n        children: row.map(cell => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => clickCellHandler(cell),\n          className: `${cn}-cell`,\n          children: /*#__PURE__*/_jsxDEV(CellComponent, {\n            cell: cell,\n            isSelected: (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) === cell.x && selectedCell.y === cell.y\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 33\n          }, this)\n        }, cell.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 29\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this))\n    }, void 0, false);\n  }, [board, selectedCell]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cn,\n    children: boardFinal\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BoardComponent, \"SzCfmmI1AtzMCdexRPibEPxEJKo=\");\n\n_c = BoardComponent;\nexport default BoardComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","useMemo","useState","Fragment","useCallback","CellComponent","cn","BoardComponent","board","setBoard","selectedCell","setSelectedCell","console","log","clickCellHandler","cell","x","y","currentFigure","lightenAvailableCells","boardFinal","cells","map","row","index","id"],"sources":["/Users/alextsukanov/my-projects/chess/src/components/board/board.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState, Fragment, useCallback} from 'react';\nimport { Board } from '../../models/board';\n\nimport {Props} from './types';\n\nimport './board.css';\nimport CellComponent from '../cell/cell';\nimport { Cell } from '../../models/cell';\nimport { Nullable } from '../../consts';\n\nconst cn = 'board';\n\nconst BoardComponent: Props = ({board, setBoard}) => {\n    const [selectedCell, setSelectedCell] = useState<Nullable<Cell>>(null);\n    console.log(selectedCell);\n    \n    const clickCellHandler = useCallback((cell: Cell) => {\n        if (selectedCell?.x === cell.x && selectedCell.y === cell.y) {\n            console.log('HERE');\n            \n            setSelectedCell(null);\n            // return;\n        }\n        setSelectedCell(cell.currentFigure ? cell : null);\n        board.lightenAvailableCells(cell);\n    }, [board, selectedCell]);\n\n    const boardFinal = useMemo(() => {\n        return (\n            <>\n                {board.cells.map((row, index) => (\n                    <Fragment key={index}>\n                        {row.map(cell => (\n                            <div \n                                key={cell.id}\n                                onClick={() => clickCellHandler(cell)}\n                                className={`${cn}-cell`}\n                            >\n                                <CellComponent \n                                    cell={cell}\n                                    isSelected={selectedCell?.x === cell.x && selectedCell.y === cell.y}\n                                />\n                            </div>\n                        ))}\n                    </Fragment>\n                ))}\n            </>\n        )\n    }, [board, selectedCell]);\n\n    return (\n        <div className={cn}>\n            {boardFinal}\n        </div>\n    );\n}\n\nexport default BoardComponent;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAA2BC,OAA3B,EAAoCC,QAApC,EAA8CC,QAA9C,EAAwDC,WAAxD,QAA0E,OAA1E;AAKA,OAAO,aAAP;AACA,OAAOC,aAAP,MAA0B,cAA1B;;;AAIA,MAAMC,EAAE,GAAG,OAAX;;AAEA,MAAMC,cAAqB,GAAG,QAAuB;EAAA;;EAAA,IAAtB;IAACC,KAAD;IAAQC;EAAR,CAAsB;EACjD,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAiB,IAAjB,CAAhD;EACAU,OAAO,CAACC,GAAR,CAAYH,YAAZ;EAEA,MAAMI,gBAAgB,GAAGV,WAAW,CAAEW,IAAD,IAAgB;IACjD,IAAI,CAAAL,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEM,CAAd,MAAoBD,IAAI,CAACC,CAAzB,IAA8BN,YAAY,CAACO,CAAb,KAAmBF,IAAI,CAACE,CAA1D,EAA6D;MACzDL,OAAO,CAACC,GAAR,CAAY,MAAZ;MAEAF,eAAe,CAAC,IAAD,CAAf,CAHyD,CAIzD;IACH;;IACDA,eAAe,CAACI,IAAI,CAACG,aAAL,GAAqBH,IAArB,GAA4B,IAA7B,CAAf;IACAP,KAAK,CAACW,qBAAN,CAA4BJ,IAA5B;EACH,CATmC,EASjC,CAACP,KAAD,EAAQE,YAAR,CATiC,CAApC;EAWA,MAAMU,UAAU,GAAGnB,OAAO,CAAC,MAAM;IAC7B,oBACI;MAAA,UACKO,KAAK,CAACa,KAAN,CAAYC,GAAZ,CAAgB,CAACC,GAAD,EAAMC,KAAN,kBACb,QAAC,QAAD;QAAA,UACKD,GAAG,CAACD,GAAJ,CAAQP,IAAI,iBACT;UAEI,OAAO,EAAE,MAAMD,gBAAgB,CAACC,IAAD,CAFnC;UAGI,SAAS,EAAG,GAAET,EAAG,OAHrB;UAAA,uBAKI,QAAC,aAAD;YACI,IAAI,EAAES,IADV;YAEI,UAAU,EAAE,CAAAL,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEM,CAAd,MAAoBD,IAAI,CAACC,CAAzB,IAA8BN,YAAY,CAACO,CAAb,KAAmBF,IAAI,CAACE;UAFtE;YAAA;YAAA;YAAA;UAAA;QALJ,GACSF,IAAI,CAACU,EADd;UAAA;UAAA;UAAA;QAAA,QADH;MADL,GAAeD,KAAf;QAAA;QAAA;QAAA;MAAA,QADH;IADL,iBADJ;EAoBH,CArByB,EAqBvB,CAAChB,KAAD,EAAQE,YAAR,CArBuB,CAA1B;EAuBA,oBACI;IAAK,SAAS,EAAEJ,EAAhB;IAAA,UACKc;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CA3CD;;GAAMb,c;;KAAAA,c;AA6CN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}
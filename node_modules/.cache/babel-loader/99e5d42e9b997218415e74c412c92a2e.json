{"ast":null,"code":"import whiteLogo from '../../assets/white-pawn.png';\nimport blackLogo from '../../assets/black-pawn.png';\nimport { Colors, FigureNames } from \"../../consts\";\nimport { Figure } from \"../figure\";\nexport class Pawn extends Figure {\n  constructor(color, cell) {\n    super(color, cell);\n    this.logo = this.color === Colors.WHITE ? whiteLogo : blackLogo;\n    this.figureName = FigureNames.PAWN;\n  }\n\n  canMove2(target) {\n    if (!super.canMove(target)) {\n      return false;\n    }\n\n    if (this.color === Colors.WHITE && this.canEat(this.cell.x, this.cell.y - 1, target, Colors.BLACK)) {\n      return true;\n    }\n\n    if (this.color === Colors.BLACK && this.canEat(this.cell.x, this.cell.y + 1, target, Colors.WHITE)) {\n      return true;\n    }\n\n    if (target.x !== this.cell.x) {\n      return false;\n    }\n\n    if (this.color === Colors.WHITE) {\n      if (this.cell.y - target.y === 1) {\n        return true;\n      }\n\n      if (this.isItsHalf(this.cell.y, this.color)) {\n        return this.cell.y - target.y === 2;\n      }\n    }\n\n    if (this.color === Colors.BLACK) {\n      if (target.y - this.cell.y === 1) {\n        return true;\n      }\n\n      if (this.isItsHalf(this.cell.y, this.color)) {\n        return target.y - this.cell.y === 2;\n      }\n    }\n\n    return false;\n  }\n\n  isItsHalf(coordY, color) {\n    if (color === Colors.WHITE) {\n      return coordY > 5;\n    } else {\n      return coordY < 2;\n    }\n  }\n\n  canEat(coordX, nextY, target, oppositeColor) {\n    var _target$currentFigure;\n\n    const result = target.y === nextY && (target.x === coordX - 1 || target.x === coordX + 1) && ((_target$currentFigure = target.currentFigure) === null || _target$currentFigure === void 0 ? void 0 : _target$currentFigure.color) === oppositeColor;\n    return result;\n  }\n\n  canMove(target) {\n    const dir = this.color === Colors.BLACK ? 1 : -1;\n    const firstMoveDir = this.color === Colors.BLACK ? 2 : -2; // eat\n\n    if ((target.x === this.cell.x - 1 || target.x === this.cell.x + 1) && target.y === this.cell.y + dir) {\n      if (target.isEnemy(this.color)) {\n        return true;\n      }\n    } // not same column check\n\n\n    if (target.x !== this.cell.x) {\n      return false;\n    } // is empty check\n\n\n    const start = this.cell.y + dir;\n    console.log('=>', this.isFirstMove);\n    const finish = start + (this.isFirstMove ? firstMoveDir : dir);\n    const min = Math.min(start, finish);\n    const max = Math.max(start, finish);\n    console.log(min, max);\n\n    for (let y = min; y < max; y += 1) {\n      if (!target.board.getCell(y, target.x).isEmpty()) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"names":["whiteLogo","blackLogo","Colors","FigureNames","Figure","Pawn","constructor","color","cell","logo","WHITE","figureName","PAWN","canMove2","target","canMove","canEat","x","y","BLACK","isItsHalf","coordY","coordX","nextY","oppositeColor","result","currentFigure","dir","firstMoveDir","isEnemy","start","console","log","isFirstMove","finish","min","Math","max","board","getCell","isEmpty"],"sources":["/Users/alextsukanov/my-projects/chess/src/models/figures/pawn.ts"],"sourcesContent":["import whiteLogo from '../../assets/white-pawn.png';\nimport blackLogo from '../../assets/black-pawn.png';\n\nimport { Colors, FigureNames } from \"../../consts\";\nimport { Cell } from \"../cell\";\nimport { Figure } from \"../figure\";\n\nexport class Pawn extends Figure {\n    constructor(color: Colors, cell: Cell) {\n        super(color, cell);\n        this.logo = this.color === Colors.WHITE ? whiteLogo : blackLogo;\n        this.figureName = FigureNames.PAWN;\n    }\n\n    public canMove2(target: Cell): boolean {\n        if (!super.canMove(target)) {\n            return false;\n        }\n        if (this.color === Colors.WHITE && this.canEat(this.cell.x, this.cell.y - 1, target, Colors.BLACK)) {\n            return true;\n        }\n        if (this.color === Colors.BLACK && this.canEat(this.cell.x, this.cell.y + 1, target, Colors.WHITE)) {\n            return true;\n        }\n        if (target.x !== this.cell.x) {            \n            return false;\n        }\n        if (this.color === Colors.WHITE) {\n            if (this.cell.y - target.y === 1) {\n                return true;\n            }\n            if (this.isItsHalf(this.cell.y, this.color)) {\n                return this.cell.y - target.y === 2;\n            }\n        }\n        if (this.color === Colors.BLACK) {\n            if (target.y - this.cell.y === 1) {\n                return true;\n            }\n            if (this.isItsHalf(this.cell.y, this.color)) {\n                return target.y - this.cell.y === 2;\n            }\n        }\n        return false;\n    }\n\n    private isItsHalf(coordY: number, color: Colors): boolean {\n        if (color === Colors.WHITE) {\n            return coordY > 5;\n        } else {\n            return coordY < 2;\n        }\n    }\n\n    private canEat(coordX: number, nextY: number, target: Cell, oppositeColor: Colors): boolean {       \n        const result = target.y === nextY && \n            (target.x === coordX - 1 || target.x === coordX + 1) && \n            target.currentFigure?.color === oppositeColor;\n        return result;\n    }\n\n    public canMove(target: Cell) {\n        const dir = this.color === Colors.BLACK ? 1 : -1;\n        const firstMoveDir = this.color === Colors.BLACK ? 2 : -2;\n        // eat\n        if ((target.x === this.cell.x - 1 || target.x === this.cell.x + 1) && target.y === this.cell.y + dir) {\n            if (target.isEnemy(this.color)) {\n                return true;\n            }\n        }\n        // not same column check\n        if (target.x !== this.cell.x) {            \n            return false;\n        }\n        // is empty check\n        const start = this.cell.y + dir;\n        console.log('=>', this.isFirstMove);\n        \n        const finish = start + (this.isFirstMove ? firstMoveDir : dir);\n        const min = Math.min(start, finish);\n        const max = Math.max(start, finish);\n        console.log(min, max);\n        \n        for (let y = min; y < max; y += 1) {\n            if (!target.board.getCell(y, target.x).isEmpty()) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Cell } from \"./cell\";\nimport { Colors } from \"./colors\";\nimport { FigureNames } from \"./figure\";\nimport { Bishop } from \"./figures/bishop\";\nimport { King } from \"./figures/king\";\nimport { Knight } from \"./figures/knight\";\nimport { Pawn } from \"./figures/pawn\";\nimport { Queen } from \"./figures/queen\";\nimport { Rook } from \"./figures/rook\";\nexport class Board {\n  constructor() {\n    this.cells = [];\n    this.lostBlackFigures = [];\n    this.lostWhiteFigures = [];\n    this.isKingUnderAttack = void 0;\n    this.isKingUnderAttack = false;\n  }\n\n  initCells() {\n    for (let i = 0; i < 8; i += 1) {\n      const row = [];\n\n      for (let j = 0; j < 8; j += 1) {\n        if ((i + j) % 2 === 0) {\n          row.push(new Cell(this, j, i, Colors.WHITE, null));\n        } else {\n          row.push(new Cell(this, j, i, Colors.BLACK, null));\n        }\n      }\n\n      this.cells.push(row);\n    }\n  }\n\n  getCopyBoard() {\n    console.log('isKingUnderAttack while copiyng', this.cells);\n    const newBoard = new Board();\n    newBoard.cells = this.cells;\n    newBoard.lostBlackFigures = this.lostBlackFigures;\n    newBoard.lostWhiteFigures = this.lostWhiteFigures;\n    newBoard.isKingUnderAttack = this.isKingUnderAttack;\n    console.log('in NEWBOARD =>', newBoard.isKingUnderAttack);\n    return newBoard;\n  }\n\n  highlightCells(selectedCell) {\n    for (let i = 0; i < this.cells.length; i += 1) {\n      const row = this.cells[i];\n\n      for (let j = 0; j < row.length; j += 1) {\n        var _selectedCell$figure, _target$figure;\n\n        const target = row[j]; // target.setAvailavble(selectedCell);\n\n        target.available = !!(selectedCell !== null && selectedCell !== void 0 && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(target)) && ((_target$figure = target.figure) === null || _target$figure === void 0 ? void 0 : _target$figure.name) !== FigureNames.KING;\n      }\n    }\n  }\n\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n\n  getFigures(color) {\n    const cells = [];\n\n    for (let i = 0; i < this.cells.length; i += 1) {\n      const row = this.cells[i];\n\n      for (let j = 0; j < row.length; j += 1) {\n        const cell = row[j];\n\n        if (cell.figure && cell.figure.color === color) {\n          cells.push(cell.figure);\n        }\n      }\n    }\n\n    return cells;\n  }\n\n  setIsKingUnderAttack() {\n    for (let i = 0; i < this.cells.length; i += 1) {\n      const row = this.cells[i];\n\n      for (let j = 0; j < row.length; j += 1) {\n        const cell = row[j];\n\n        if (cell.kingUnderAttack) {\n          console.log('ONE CELL kingUnderAttack');\n          this.isKingUnderAttack = true;\n          console.log('in board =>', this.isKingUnderAttack);\n          break;\n        }\n      }\n    }\n  }\n\n  addPawns() {\n    for (let i = 0; i < 8; i += 1) {\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n    }\n  }\n\n  addRooks() {\n    new Rook(Colors.BLACK, this.getCell(0, 0));\n    new Rook(Colors.BLACK, this.getCell(7, 0));\n    new Rook(Colors.WHITE, this.getCell(0, 7));\n    new Rook(Colors.WHITE, this.getCell(7, 7));\n  }\n\n  addKnights() {\n    new Knight(Colors.BLACK, this.getCell(1, 0));\n    new Knight(Colors.BLACK, this.getCell(6, 0));\n    new Knight(Colors.WHITE, this.getCell(1, 7));\n    new Knight(Colors.WHITE, this.getCell(6, 7));\n  }\n\n  addBishops() {\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n  }\n\n  addQueens() {\n    new Queen(Colors.BLACK, this.getCell(4, 0));\n    new Queen(Colors.WHITE, this.getCell(4, 7));\n  }\n\n  addKings() {\n    new King(Colors.BLACK, this.getCell(3, 0));\n    new King(Colors.WHITE, this.getCell(3, 7));\n  }\n\n  addFigures() {\n    this.addPawns();\n    this.addRooks();\n    this.addKnights();\n    this.addBishops();\n    this.addQueens();\n    this.addKings();\n  }\n\n}","map":{"version":3,"names":["Cell","Colors","FigureNames","Bishop","King","Knight","Pawn","Queen","Rook","Board","constructor","cells","lostBlackFigures","lostWhiteFigures","isKingUnderAttack","initCells","i","row","j","push","WHITE","BLACK","getCopyBoard","console","log","newBoard","highlightCells","selectedCell","length","target","available","figure","canMove","name","KING","getCell","x","y","getFigures","color","cell","setIsKingUnderAttack","kingUnderAttack","addPawns","addRooks","addKnights","addBishops","addQueens","addKings","addFigures"],"sources":["/Users/alextsukanov/my-projects/chess/src/models/board.ts"],"sourcesContent":["import { Cell } from \"./cell\";\nimport { Colors } from \"./colors\";\nimport { Figure, FigureNames } from \"./figure\";\nimport { Bishop } from \"./figures/bishop\";\nimport { King } from \"./figures/king\";\nimport { Knight } from \"./figures/knight\";\nimport { Pawn } from \"./figures/pawn\";\nimport { Queen } from \"./figures/queen\";\nimport { Rook } from \"./figures/rook\";\n\nexport class Board {\n    cells: Cell[][] = [];\n    lostBlackFigures: Figure[] = [];\n    lostWhiteFigures: Figure[] = [];\n    isKingUnderAttack: boolean;\n\n    constructor() {\n        this.isKingUnderAttack = false;\n    }\n\n    public initCells() {\n        for (let i = 0; i < 8; i += 1) {\n            const row: Cell[] = [];\n\n            for (let j = 0; j < 8; j += 1) {\n                if ((i + j) % 2 === 0) {\n                    row.push(new Cell(this, j, i, Colors.WHITE, null));\n                } else {\n                    row.push(new Cell(this, j, i, Colors.BLACK, null));\n                }\n            }\n\n            this.cells.push(row);\n        }\n    }\n\n    public getCopyBoard(): Board {\n        console.log('isKingUnderAttack while copiyng', this.cells);\n\n        const newBoard = new Board();\n        newBoard.cells = this.cells;\n        newBoard.lostBlackFigures = this.lostBlackFigures;\n        newBoard.lostWhiteFigures = this.lostWhiteFigures;\n        newBoard.isKingUnderAttack = this.isKingUnderAttack;\n        console.log('in NEWBOARD =>', newBoard.isKingUnderAttack)\n        return newBoard;\n    }\n\n    public highlightCells(selectedCell: Cell | null) {\n        for (let i = 0; i < this.cells.length; i += 1) {\n            const row = this.cells[i];\n\n            for (let j = 0; j < row.length; j += 1) {\n                const target = row[j];\n\n                // target.setAvailavble(selectedCell);\n                target.available = !!selectedCell?.figure?.canMove(target) && target.figure?.name !== FigureNames.KING;\n            }\n        }\n    }\n\n    public getCell(x: number, y: number): Cell {\n        return this.cells[y][x];\n    }\n\n    public getFigures(color: Colors) {\n        const cells: Figure[] = [];\n\n        for (let i = 0; i < this.cells.length; i += 1) {\n            const row = this.cells[i];\n\n            for (let j = 0; j < row.length; j += 1) {\n                const cell = row[j];\n\n                if (cell.figure && cell.figure.color === color) {\n                    cells.push(cell.figure);\n                }\n            }            \n        }\n\n        return cells;\n    }\n\n    public setIsKingUnderAttack() {\n        for (let i = 0; i < this.cells.length; i += 1) {\n            const row = this.cells[i];\n\n            for (let j = 0; j < row.length; j += 1) {\n                const cell = row[j];\n\n                if (cell.kingUnderAttack) {\n                    console.log('ONE CELL kingUnderAttack')\n                    this.isKingUnderAttack = true;\n                    console.log('in board =>', this.isKingUnderAttack)\n                    break;\n                }\n            }            \n        }\n    }\n\n    private addPawns() {\n        for (let i = 0; i < 8; i += 1) {\n            new Pawn(Colors.BLACK, this.getCell(i, 1));\n            new Pawn(Colors.WHITE, this.getCell(i, 6));\n        }\n    }\n\n    private addRooks() {\n        new Rook(Colors.BLACK, this.getCell(0, 0));\n        new Rook(Colors.BLACK, this.getCell(7, 0));\n        new Rook(Colors.WHITE, this.getCell(0, 7));\n        new Rook(Colors.WHITE, this.getCell(7, 7));\n    }\n\n    private addKnights() {\n        new Knight(Colors.BLACK, this.getCell(1, 0));\n        new Knight(Colors.BLACK, this.getCell(6, 0));\n        new Knight(Colors.WHITE, this.getCell(1, 7));\n        new Knight(Colors.WHITE, this.getCell(6, 7));\n    }\n\n    private addBishops() {\n        new Bishop(Colors.BLACK, this.getCell(2, 0));\n        new Bishop(Colors.BLACK, this.getCell(5, 0));\n        new Bishop(Colors.WHITE, this.getCell(2, 7));\n        new Bishop(Colors.WHITE, this.getCell(5, 7));\n    }\n\n    private addQueens() {\n        new Queen(Colors.BLACK, this.getCell(4, 0));\n        new Queen(Colors.WHITE, this.getCell(4, 7));\n    }\n\n    private addKings() {\n        new King(Colors.BLACK, this.getCell(3, 0));\n        new King(Colors.WHITE, this.getCell(3, 7));\n    }\n\n    public addFigures() {\n        this.addPawns();\n        this.addRooks();\n        this.addKnights();\n        this.addBishops();\n        this.addQueens();\n        this.addKings();\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { consts, Colors } from \"../consts\";\nimport { Cell } from \"./cell\";\nimport { Pawn } from \"./figures/pawn\";\nimport { Rook } from \"./figures/rook\";\nconst {\n  COLUMNS_AMOUNT,\n  ROWS_AMOUNT\n} = consts;\nexport class Board {\n  constructor() {\n    this.cells = void 0;\n    this.cells = [];\n  }\n\n  prepareCells() {\n    for (let i = 1; i <= COLUMNS_AMOUNT; i += 1) {\n      const row = [];\n\n      for (let j = 1; j <= ROWS_AMOUNT; j += 1) {\n        if ((i + j) % 2 === 0) {\n          row.push(new Cell(j, i, Colors.WHITE));\n        } else {\n          row.push(new Cell(j, i, Colors.BLACK));\n        }\n      }\n\n      this.cells.push(row);\n    }\n  }\n\n  getCell(y, x) {\n    return this.cells[y][x];\n  }\n\n  addFigures() {\n    console.log('GE');\n    this.addPawns();\n    this.addRooks();\n  }\n\n  addPawns() {\n    for (let i = 1; i <= COLUMNS_AMOUNT; i += 1) {\n      new Pawn(Colors.BLACK, this.getCell(1, i));\n      new Pawn(Colors.WHITE, this.getCell(ROWS_AMOUNT - 2, i));\n    }\n  }\n\n  addRooks() {\n    console.log(this.getCell(0, 0));\n    new Rook(Colors.BLACK, this.getCell(0, 0));\n    new Rook(Colors.BLACK, this.getCell(0, COLUMNS_AMOUNT - 1));\n    new Rook(Colors.WHITE, this.getCell(ROWS_AMOUNT - 1, 0));\n    new Rook(Colors.WHITE, this.getCell(ROWS_AMOUNT - 1, COLUMNS_AMOUNT - 1));\n  }\n\n  addKnight() {\n    new Pawn(Colors.WHITE, this.getCell(2, 6));\n  }\n\n  addBishops() {\n    new Pawn(Colors.WHITE, this.getCell(2, 6));\n  }\n\n  addQueens() {\n    new Pawn(Colors.WHITE, this.getCell(2, 6));\n  }\n\n  addKings() {\n    new Pawn(Colors.WHITE, this.getCell(2, 6));\n  }\n\n}","map":{"version":3,"names":["consts","Colors","Cell","Pawn","Rook","COLUMNS_AMOUNT","ROWS_AMOUNT","Board","constructor","cells","prepareCells","i","row","j","push","WHITE","BLACK","getCell","y","x","addFigures","console","log","addPawns","addRooks","addKnight","addBishops","addQueens","addKings"],"sources":["/Users/alextsukanov/my-projects/chess/src/models/board.ts"],"sourcesContent":["import {consts, Colors} from \"../consts\";\nimport { Cell } from \"./cell\";\nimport { Pawn } from \"./figures/pawn\";\nimport { Rook } from \"./figures/rook\";\n\nconst {COLUMNS_AMOUNT, ROWS_AMOUNT} = consts;\n\nexport class Board {\n    cells: Cell[][];\n\n    constructor() {\n        this.cells = [];\n    }\n\n    public prepareCells() {\n        for (let i = 1; i <= COLUMNS_AMOUNT; i += 1) {\n            const row: Cell[] = [];\n            for (let j = 1; j <= ROWS_AMOUNT; j += 1) {\n                if ((i + j) % 2 === 0) {\n                    row.push(new Cell(j, i, Colors.WHITE));\n                } else {\n                    row.push(new Cell(j, i, Colors.BLACK));\n                }\n            }\n            this.cells.push(row);\n        }\n    }\n\n    private getCell(y: number, x: number) {\n        return this.cells[y][x];\n    }\n\n    public addFigures() {\n        console.log('GE');\n        \n        this.addPawns();\n        this.addRooks();\n    }\n\n    private addPawns() {\n        for (let i = 1; i <= COLUMNS_AMOUNT; i += 1) {\n            new Pawn(Colors.BLACK, this.getCell(1, i));\n            new Pawn(Colors.WHITE, this.getCell(ROWS_AMOUNT - 2, i));\n        }\n    }\n\n    private addRooks() {\n        console.log(this.getCell(0, 0))\n        new Rook(Colors.BLACK, this.getCell(0, 0));\n        new Rook(Colors.BLACK, this.getCell(0, COLUMNS_AMOUNT - 1));\n        new Rook(Colors.WHITE, this.getCell(ROWS_AMOUNT - 1, 0));\n        new Rook(Colors.WHITE, this.getCell(ROWS_AMOUNT - 1, COLUMNS_AMOUNT - 1));\n    }\n\n    private addKnight() {\n        new Pawn(Colors.WHITE, this.getCell(2, 6));\n    }\n\n    private addBishops() {\n        new Pawn(Colors.WHITE, this.getCell(2, 6));\n    }\n\n    private addQueens() {\n        new Pawn(Colors.WHITE, this.getCell(2, 6));\n    }\n\n    private addKings() {\n        new Pawn(Colors.WHITE, this.getCell(2, 6));\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
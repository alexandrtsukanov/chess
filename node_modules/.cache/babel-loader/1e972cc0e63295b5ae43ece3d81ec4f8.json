{"ast":null,"code":"var _jsxFileName = \"/Users/alextsukanov/my-projects/chess/src/components/board/board.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport CellComponent from '../cell/cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BoardComponent = _ref => {\n  _s();\n\n  var _currentPlayer$color;\n\n  let {\n    board,\n    selectedCell,\n    setSelectedCell,\n    setBoard,\n    currentPlayer,\n    swapPlayer\n  } = _ref;\n  useEffect(() => {\n    highlightCells();\n  }, [selectedCell]);\n\n  const click = cell => {\n    var _selectedCell$figure;\n\n    if (selectedCell && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(cell)) {\n      var _selectedCell$figure2;\n\n      const isSafe = (_selectedCell$figure2 = selectedCell.figure) === null || _selectedCell$figure2 === void 0 ? void 0 : _selectedCell$figure2.isSafeMove(cell);\n      console.log('isSafe =>', isSafe);\n\n      if (isSafe) {\n        selectedCell.moveFigure(cell);\n        updateBoard();\n        swapPlayer();\n        setSelectedCell(null);\n      }\n    } else {\n      var _cell$figure;\n\n      if (!!cell.figure && ((_cell$figure = cell.figure) === null || _cell$figure === void 0 ? void 0 : _cell$figure.color) === (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color)) {\n        setSelectedCell(cell);\n      }\n    }\n  };\n\n  const highlightCells = () => {\n    board.highlightCells(selectedCell);\n    updateBoard();\n  };\n\n  const updateBoard = () => {\n    const newBoard = board.getCopyBoard();\n    setBoard(newBoard);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Current player: \", (_currentPlayer$color = currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color) !== null && _currentPlayer$color !== void 0 ? _currentPlayer$color : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.cells.map((row, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n        children: row.map(cell => /*#__PURE__*/_jsxDEV(CellComponent, {\n          cell: cell,\n          selected: cell.x === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) && cell.y === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.y),\n          click: click\n        }, cell.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BoardComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = BoardComponent;\nexport default BoardComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","Fragment","useEffect","CellComponent","BoardComponent","board","selectedCell","setSelectedCell","setBoard","currentPlayer","swapPlayer","highlightCells","click","cell","figure","canMove","isSafe","isSafeMove","console","log","moveFigure","updateBoard","color","newBoard","getCopyBoard","cells","map","row","index","x","y","id"],"sources":["/Users/alextsukanov/my-projects/chess/src/components/board/board.tsx"],"sourcesContent":["import React, { Dispatch, FC, Fragment, SetStateAction, useEffect } from 'react';\nimport { Board } from '../../models/board';\nimport CellComponent from '../cell/cell';\nimport { Cell } from '../../models/cell';\nimport { Player } from '../../models/player';\n\ninterface Props {\n    board: Board;\n    selectedCell: Cell | null;\n    setSelectedCell: Dispatch<SetStateAction<null | Cell>>;\n    setBoard: Dispatch<SetStateAction<Board>>;\n    currentPlayer: Player | null;\n    swapPlayer: () => void;\n}\n\nconst BoardComponent: FC<Props> = ({\n    board,\n    selectedCell,\n    setSelectedCell,\n    setBoard,\n    currentPlayer,\n    swapPlayer,\n}) => {\n    useEffect(() => {\n        highlightCells();\n    }, [selectedCell]);\n\n    const click = (cell: Cell) => {\n        if (selectedCell && selectedCell.figure?.canMove(cell)) {\n            const isSafe = selectedCell.figure?.isSafeMove(cell);\n            console.log('isSafe =>', isSafe)\n\n            if (isSafe) {\n                selectedCell.moveFigure(cell);\n                updateBoard();\n                swapPlayer();\n                setSelectedCell(null);\n            }\n        } else {\n            if (!!cell.figure && cell.figure?.color === currentPlayer?.color) {\n                setSelectedCell(cell);\n            }\n        }\n    };\n\n    const highlightCells = () => {\n        board.highlightCells(selectedCell);\n        updateBoard();\n    };\n\n    const updateBoard = () => {\n        const newBoard = board.getCopyBoard();\n        setBoard(newBoard);\n    };\n\n    return (\n        <div>\n            <h3>Current player: {currentPlayer?.color ?? ''}</h3>\n\n            <div className=\"board\">\n                {board.cells.map((row, index) => (\n                    <Fragment key={index}>\n                        {row.map(cell => (\n                            <CellComponent\n                                cell={cell}\n                                selected={cell.x === selectedCell?.x && cell.y === selectedCell?.y}\n                                click={click}\n                                key={cell.id}\n                            />\n                        ))}\n                    </Fragment>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default BoardComponent;"],"mappings":";;;AAAA,OAAOA,KAAP,IAA8BC,QAA9B,EAAwDC,SAAxD,QAAyE,OAAzE;AAEA,OAAOC,aAAP,MAA0B,cAA1B;;;AAaA,MAAMC,cAAyB,GAAG,QAO5B;EAAA;;EAAA;;EAAA,IAP6B;IAC/BC,KAD+B;IAE/BC,YAF+B;IAG/BC,eAH+B;IAI/BC,QAJ+B;IAK/BC,aAL+B;IAM/BC;EAN+B,CAO7B;EACFR,SAAS,CAAC,MAAM;IACZS,cAAc;EACjB,CAFQ,EAEN,CAACL,YAAD,CAFM,CAAT;;EAIA,MAAMM,KAAK,GAAIC,IAAD,IAAgB;IAAA;;IAC1B,IAAIP,YAAY,4BAAIA,YAAY,CAACQ,MAAjB,iDAAI,qBAAqBC,OAArB,CAA6BF,IAA7B,CAApB,EAAwD;MAAA;;MACpD,MAAMG,MAAM,4BAAGV,YAAY,CAACQ,MAAhB,0DAAG,sBAAqBG,UAArB,CAAgCJ,IAAhC,CAAf;MACAK,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,MAAzB;;MAEA,IAAIA,MAAJ,EAAY;QACRV,YAAY,CAACc,UAAb,CAAwBP,IAAxB;QACAQ,WAAW;QACXX,UAAU;QACVH,eAAe,CAAC,IAAD,CAAf;MACH;IACJ,CAVD,MAUO;MAAA;;MACH,IAAI,CAAC,CAACM,IAAI,CAACC,MAAP,IAAiB,iBAAAD,IAAI,CAACC,MAAL,8DAAaQ,KAAb,OAAuBb,aAAvB,aAAuBA,aAAvB,uBAAuBA,aAAa,CAAEa,KAAtC,CAArB,EAAkE;QAC9Df,eAAe,CAACM,IAAD,CAAf;MACH;IACJ;EACJ,CAhBD;;EAkBA,MAAMF,cAAc,GAAG,MAAM;IACzBN,KAAK,CAACM,cAAN,CAAqBL,YAArB;IACAe,WAAW;EACd,CAHD;;EAKA,MAAMA,WAAW,GAAG,MAAM;IACtB,MAAME,QAAQ,GAAGlB,KAAK,CAACmB,YAAN,EAAjB;IACAhB,QAAQ,CAACe,QAAD,CAAR;EACH,CAHD;;EAKA,oBACI;IAAA,wBACI;MAAA,uDAAqBd,aAArB,aAAqBA,aAArB,uBAAqBA,aAAa,CAAEa,KAApC,uEAA6C,EAA7C;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAGI;MAAK,SAAS,EAAC,OAAf;MAAA,UACKjB,KAAK,CAACoB,KAAN,CAAYC,GAAZ,CAAgB,CAACC,GAAD,EAAMC,KAAN,kBACb,QAAC,QAAD;QAAA,UACKD,GAAG,CAACD,GAAJ,CAAQb,IAAI,iBACT,QAAC,aAAD;UACI,IAAI,EAAEA,IADV;UAEI,QAAQ,EAAEA,IAAI,CAACgB,CAAL,MAAWvB,YAAX,aAAWA,YAAX,uBAAWA,YAAY,CAAEuB,CAAzB,KAA8BhB,IAAI,CAACiB,CAAL,MAAWxB,YAAX,aAAWA,YAAX,uBAAWA,YAAY,CAAEwB,CAAzB,CAF5C;UAGI,KAAK,EAAElB;QAHX,GAISC,IAAI,CAACkB,EAJd;UAAA;UAAA;UAAA;QAAA,QADH;MADL,GAAeH,KAAf;QAAA;QAAA;QAAA;MAAA,QADH;IADL;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAoBH,CA5DD;;GAAMxB,c;;KAAAA,c;AA8DN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}
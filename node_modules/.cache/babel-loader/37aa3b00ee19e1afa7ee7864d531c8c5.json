{"ast":null,"code":"import { consts, Colors } from \"../consts\";\nimport { Cell } from \"./cell\";\nimport { Bishop } from \"./figures/bishop\";\nimport { King } from \"./figures/king\";\nimport { Knight } from \"./figures/knight\";\nimport { Pawn } from \"./figures/pawn\";\nimport { Queen } from \"./figures/queen\";\nimport { Rook } from \"./figures/rook\";\nconst {\n  COLUMNS_AMOUNT,\n  ROWS_AMOUNT,\n  POS_ROOK,\n  POS_KNIGHT,\n  POS_BISHOP,\n  POS_QUEEN_WHITE,\n  POS_QUEEN_BLACK,\n  POS_KING_WHITE,\n  POS_KING_BLACK\n} = consts;\nexport class Board {\n  constructor() {\n    this.cells = void 0;\n    this.cells = [];\n  }\n\n  prepareCells() {\n    for (let i = 1; i <= COLUMNS_AMOUNT; i += 1) {\n      const row = [];\n\n      for (let j = 1; j <= ROWS_AMOUNT; j += 1) {\n        if ((i + j) % 2 === 0) {\n          row.push(new Cell(j, i, Colors.WHITE));\n        } else {\n          row.push(new Cell(j, i, Colors.BLACK));\n        }\n      }\n\n      this.cells.push(row);\n    }\n  }\n\n  getCell(y, x) {\n    return this.cells[y][x];\n  }\n\n  addFigures() {\n    this.addPawns();\n    this.addRooks();\n    this.addKnights();\n    this.addBishops();\n    this.addQueens();\n    this.addKings();\n  }\n\n  addFigure(figure, poses) {\n    for (let i = 0; i < poses.length; i += 1) {}\n  }\n\n  addPawns() {\n    for (let i = 0; i < COLUMNS_AMOUNT; i += 1) {\n      new Pawn(Colors.BLACK, this.getCell(1, i));\n      new Pawn(Colors.WHITE, this.getCell(ROWS_AMOUNT - 2, i));\n    }\n  }\n\n  addRooks() {\n    for (let i = 0; i < POS_ROOK.length; i += 1) {\n      new Rook(Colors.BLACK, this.getCell(0, POS_ROOK[i]));\n      new Rook(Colors.WHITE, this.getCell(ROWS_AMOUNT - 1, POS_ROOK[i]));\n    }\n  }\n\n  addKnights() {\n    for (let i = 0; i < POS_KNIGHT.length; i += 1) {\n      new Knight(Colors.BLACK, this.getCell(0, POS_KNIGHT[i]));\n      new Knight(Colors.WHITE, this.getCell(ROWS_AMOUNT - 1, POS_KNIGHT[i]));\n    }\n  }\n\n  addBishops() {\n    for (let i = 0; i < POS_BISHOP.length; i += 1) {\n      new Bishop(Colors.BLACK, this.getCell(0, POS_BISHOP[i]));\n      new Bishop(Colors.WHITE, this.getCell(ROWS_AMOUNT - 1, POS_BISHOP[i]));\n    }\n  }\n\n  addQueens() {\n    new Queen(Colors.BLACK, this.getCell(0, POS_QUEEN_BLACK));\n    new Queen(Colors.WHITE, this.getCell(ROWS_AMOUNT - 1, POS_QUEEN_WHITE));\n  }\n\n  addKings() {\n    new King(Colors.BLACK, this.getCell(0, POS_KING_BLACK));\n    new King(Colors.WHITE, this.getCell(ROWS_AMOUNT - 1, POS_KING_WHITE));\n  }\n\n}","map":{"version":3,"names":["consts","Colors","Cell","Bishop","King","Knight","Pawn","Queen","Rook","COLUMNS_AMOUNT","ROWS_AMOUNT","POS_ROOK","POS_KNIGHT","POS_BISHOP","POS_QUEEN_WHITE","POS_QUEEN_BLACK","POS_KING_WHITE","POS_KING_BLACK","Board","constructor","cells","prepareCells","i","row","j","push","WHITE","BLACK","getCell","y","x","addFigures","addPawns","addRooks","addKnights","addBishops","addQueens","addKings","addFigure","figure","poses","length"],"sources":["/Users/alextsukanov/my-projects/chess/src/models/board.ts"],"sourcesContent":["import {consts, Colors} from \"../consts\";\nimport { Cell } from \"./cell\";\nimport { Figure } from \"./figure\";\nimport { Bishop } from \"./figures/bishop\";\nimport { King } from \"./figures/king\";\nimport { Knight } from \"./figures/knight\";\nimport { Pawn } from \"./figures/pawn\";\nimport { Queen } from \"./figures/queen\";\nimport { Rook } from \"./figures/rook\";\n\nconst {\n    COLUMNS_AMOUNT, \n    ROWS_AMOUNT,\n    POS_ROOK,\n    POS_KNIGHT,\n    POS_BISHOP,\n    POS_QUEEN_WHITE,\n    POS_QUEEN_BLACK,\n    POS_KING_WHITE,\n    POS_KING_BLACK,\n} = consts;\n\nexport class Board {\n    cells: Cell[][];\n\n    constructor() {\n        this.cells = [];\n    }\n\n    public prepareCells() {\n        for (let i = 1; i <= COLUMNS_AMOUNT; i += 1) {\n            const row: Cell[] = [];\n            for (let j = 1; j <= ROWS_AMOUNT; j += 1) {\n                if ((i + j) % 2 === 0) {\n                    row.push(new Cell(j, i, Colors.WHITE));\n                } else {\n                    row.push(new Cell(j, i, Colors.BLACK));\n                }\n            }\n            this.cells.push(row);\n        }\n    }\n\n    private getCell(y: number, x: number) {\n        return this.cells[y][x];\n    }\n\n    public addFigures() {\n        this.addPawns();\n        this.addRooks();\n        this.addKnights();\n        this.addBishops();\n        this.addQueens();\n        this.addKings();\n    }\n\n    private addFigure(figure: Figure, poses: number[]) {\n        for (let i = 0; i < poses.length; i += 1) {\n\n        }\n    }\n\n    private addPawns() {\n        for (let i = 0; i < COLUMNS_AMOUNT; i += 1) {\n            new Pawn(Colors.BLACK, this.getCell(1, i));\n            new Pawn(Colors.WHITE, this.getCell(ROWS_AMOUNT - 2, i));\n        }\n    }\n\n    private addRooks() {\n        for (let i = 0; i < POS_ROOK.length; i += 1) {\n            new Rook(Colors.BLACK, this.getCell(0, POS_ROOK[i]));\n            new Rook(Colors.WHITE, this.getCell(ROWS_AMOUNT - 1, POS_ROOK[i]));\n        }\n    }\n\n    private addKnights() {\n        for (let i = 0; i < POS_KNIGHT.length; i += 1) {\n            new Knight(Colors.BLACK, this.getCell(0, POS_KNIGHT[i]));\n            new Knight(Colors.WHITE, this.getCell(ROWS_AMOUNT - 1, POS_KNIGHT[i]));\n        }\n    }\n\n    private addBishops() {\n        for (let i = 0; i < POS_BISHOP.length; i += 1) {\n            new Bishop(Colors.BLACK, this.getCell(0, POS_BISHOP[i]));\n            new Bishop(Colors.WHITE, this.getCell(ROWS_AMOUNT - 1, POS_BISHOP[i]));\n        }\n    }\n\n    private addQueens() {\n        new Queen(Colors.BLACK, this.getCell(0, POS_QUEEN_BLACK));\n        new Queen(Colors.WHITE, this.getCell(ROWS_AMOUNT - 1, POS_QUEEN_WHITE));\n    }\n\n    private addKings() {\n        new King(Colors.BLACK, this.getCell(0, POS_KING_BLACK));\n        new King(Colors.WHITE, this.getCell(ROWS_AMOUNT - 1, POS_KING_WHITE));\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
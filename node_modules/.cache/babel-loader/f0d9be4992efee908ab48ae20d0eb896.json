{"ast":null,"code":"import { Cell } from \"./cell\";\nimport { Colors } from \"./colors\";\nimport { Bishop } from \"./figures/bishop\";\nimport { King } from \"./figures/king\";\nimport { Knight } from \"./figures/knight\";\nimport { Pawn } from \"./figures/pawn\";\nimport { Queen } from \"./figures/queen\";\nimport { Rook } from \"./figures/rook\";\nexport class Board {\n  constructor() {\n    this.cells = [];\n    this.lostBlackFigures = [];\n    this.lostWhiteFigures = [];\n    this.isKingUnderAttack = false;\n  }\n\n  initCells() {\n    for (let i = 0; i < 8; i += 1) {\n      const row = [];\n\n      for (let j = 0; j < 8; j += 1) {\n        if ((i + j) % 2 === 0) {\n          row.push(new Cell(this, j, i, Colors.WHITE, null));\n        } else {\n          row.push(new Cell(this, j, i, Colors.BLACK, null));\n        }\n      }\n\n      this.cells.push(row);\n    }\n  }\n\n  getCopyBoard() {\n    console.log('isKingUnderAttack while copiyng', this.isKingUnderAttack);\n    const newBoard = new Board();\n    newBoard.cells = this.cells;\n    newBoard.lostBlackFigures = this.lostBlackFigures;\n    newBoard.lostWhiteFigures = this.lostWhiteFigures;\n    newBoard.isKingUnderAttack = this.isKingUnderAttack;\n    console.log('in NEWBOARD =>', newBoard.isKingUnderAttack);\n    return newBoard;\n  }\n\n  highlightCells(selectedCell) {\n    for (let i = 0; i < this.cells.length; i += 1) {\n      const row = this.cells[i];\n\n      for (let j = 0; j < row.length; j += 1) {\n        const target = row[j];\n        target.setAvailavble(selectedCell);\n      }\n    }\n  }\n\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n\n  getFigures(color) {\n    const cells = [];\n\n    for (let i = 0; i < this.cells.length; i += 1) {\n      const row = this.cells[i];\n\n      for (let j = 0; j < row.length; j += 1) {\n        const cell = row[j];\n\n        if (cell.figure && cell.figure.color === color) {\n          cells.push(cell.figure);\n        }\n      }\n    }\n\n    return cells;\n  }\n\n  setIsKingUnderAttack() {\n    this.isKingUnderAttack = true;\n  }\n\n  resetIsKingUnderAttack() {\n    this.isKingUnderAttack = false;\n  }\n\n  addPawns() {\n    for (let i = 0; i < 8; i += 1) {\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n    }\n  }\n\n  addRooks() {\n    new Rook(Colors.BLACK, this.getCell(0, 0));\n    new Rook(Colors.BLACK, this.getCell(7, 0));\n    new Rook(Colors.WHITE, this.getCell(0, 7));\n    new Rook(Colors.WHITE, this.getCell(7, 7));\n  }\n\n  addKnights() {\n    new Knight(Colors.BLACK, this.getCell(1, 0));\n    new Knight(Colors.BLACK, this.getCell(6, 0));\n    new Knight(Colors.WHITE, this.getCell(1, 7));\n    new Knight(Colors.WHITE, this.getCell(6, 7));\n  }\n\n  addBishops() {\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n  }\n\n  addQueens() {\n    new Queen(Colors.BLACK, this.getCell(4, 0));\n    new Queen(Colors.WHITE, this.getCell(4, 7));\n  }\n\n  addKings() {\n    new King(Colors.BLACK, this.getCell(3, 0));\n    new King(Colors.WHITE, this.getCell(3, 7));\n  }\n\n  addFigures() {\n    this.addPawns();\n    this.addRooks();\n    this.addKnights();\n    this.addBishops();\n    this.addQueens();\n    this.addKings();\n  }\n\n}","map":{"version":3,"names":["Cell","Colors","Bishop","King","Knight","Pawn","Queen","Rook","Board","cells","lostBlackFigures","lostWhiteFigures","isKingUnderAttack","initCells","i","row","j","push","WHITE","BLACK","getCopyBoard","console","log","newBoard","highlightCells","selectedCell","length","target","setAvailavble","getCell","x","y","getFigures","color","cell","figure","setIsKingUnderAttack","resetIsKingUnderAttack","addPawns","addRooks","addKnights","addBishops","addQueens","addKings","addFigures"],"sources":["/Users/alextsukanov/my-projects/chess/src/models/board.ts"],"sourcesContent":["import { Cell } from \"./cell\";\nimport { Colors } from \"./colors\";\nimport { Figure, FigureNames } from \"./figure\";\nimport { Bishop } from \"./figures/bishop\";\nimport { King } from \"./figures/king\";\nimport { Knight } from \"./figures/knight\";\nimport { Pawn } from \"./figures/pawn\";\nimport { Queen } from \"./figures/queen\";\nimport { Rook } from \"./figures/rook\";\n\nexport class Board {\n    cells: Cell[][] = [];\n    lostBlackFigures: Figure[] = [];\n    lostWhiteFigures: Figure[] = [];\n    isKingUnderAttack: boolean = false;\n\n    public initCells() {\n        for (let i = 0; i < 8; i += 1) {\n            const row: Cell[] = [];\n\n            for (let j = 0; j < 8; j += 1) {\n                if ((i + j) % 2 === 0) {\n                    row.push(new Cell(this, j, i, Colors.WHITE, null));\n                } else {\n                    row.push(new Cell(this, j, i, Colors.BLACK, null));\n                }\n            }\n\n            this.cells.push(row);\n        }\n    }\n\n    public getCopyBoard(): Board {\n        console.log('isKingUnderAttack while copiyng', this.isKingUnderAttack);\n\n        const newBoard = new Board();\n        newBoard.cells = this.cells;\n        newBoard.lostBlackFigures = this.lostBlackFigures;\n        newBoard.lostWhiteFigures = this.lostWhiteFigures;\n        newBoard.isKingUnderAttack = this.isKingUnderAttack;\n        console.log('in NEWBOARD =>', newBoard.isKingUnderAttack)\n        return newBoard;\n    }\n\n    public highlightCells(selectedCell: Cell | null) {\n        for (let i = 0; i < this.cells.length; i += 1) {\n            const row = this.cells[i];\n\n            for (let j = 0; j < row.length; j += 1) {\n                const target = row[j];\n\n                target.setAvailavble(selectedCell);\n            }\n        }\n    }\n\n    public getCell(x: number, y: number): Cell {\n        return this.cells[y][x];\n    }\n\n    public getFigures(color: Colors) {\n        const cells: Figure[] = [];\n\n        for (let i = 0; i < this.cells.length; i += 1) {\n            const row = this.cells[i];\n\n            for (let j = 0; j < row.length; j += 1) {\n                const cell = row[j];\n\n                if (cell.figure && cell.figure.color === color) {\n                    cells.push(cell.figure);\n                }\n            }            \n        }\n\n        return cells;\n    }\n\n    public setIsKingUnderAttack() {\n        this.isKingUnderAttack = true;\n    }\n\n    public resetIsKingUnderAttack() {\n        this.isKingUnderAttack = false;\n    }\n\n    private addPawns() {\n        for (let i = 0; i < 8; i += 1) {\n            new Pawn(Colors.BLACK, this.getCell(i, 1));\n            new Pawn(Colors.WHITE, this.getCell(i, 6));\n        }\n    }\n\n    private addRooks() {\n        new Rook(Colors.BLACK, this.getCell(0, 0));\n        new Rook(Colors.BLACK, this.getCell(7, 0));\n        new Rook(Colors.WHITE, this.getCell(0, 7));\n        new Rook(Colors.WHITE, this.getCell(7, 7));\n    }\n\n    private addKnights() {\n        new Knight(Colors.BLACK, this.getCell(1, 0));\n        new Knight(Colors.BLACK, this.getCell(6, 0));\n        new Knight(Colors.WHITE, this.getCell(1, 7));\n        new Knight(Colors.WHITE, this.getCell(6, 7));\n    }\n\n    private addBishops() {\n        new Bishop(Colors.BLACK, this.getCell(2, 0));\n        new Bishop(Colors.BLACK, this.getCell(5, 0));\n        new Bishop(Colors.WHITE, this.getCell(2, 7));\n        new Bishop(Colors.WHITE, this.getCell(5, 7));\n    }\n\n    private addQueens() {\n        new Queen(Colors.BLACK, this.getCell(4, 0));\n        new Queen(Colors.WHITE, this.getCell(4, 7));\n    }\n\n    private addKings() {\n        new King(Colors.BLACK, this.getCell(3, 0));\n        new King(Colors.WHITE, this.getCell(3, 7));\n    }\n\n    public addFigures() {\n        this.addPawns();\n        this.addRooks();\n        this.addKnights();\n        this.addBishops();\n        this.addQueens();\n        this.addKings();\n    }\n}"],"mappings":"AAAA,SAASA,IAAT,QAAqB,QAArB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,IAAT,QAAqB,gBAArB;AAEA,OAAO,MAAMC,KAAN,CAAY;EAAA;IAAA,KACfC,KADe,GACG,EADH;IAAA,KAEfC,gBAFe,GAEc,EAFd;IAAA,KAGfC,gBAHe,GAGc,EAHd;IAAA,KAIfC,iBAJe,GAIc,KAJd;EAAA;;EAMRC,SAAS,GAAG;IACf,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;MAC3B,MAAMC,GAAW,GAAG,EAApB;;MAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;QAC3B,IAAI,CAACF,CAAC,GAAGE,CAAL,IAAU,CAAV,KAAgB,CAApB,EAAuB;UACnBD,GAAG,CAACE,IAAJ,CAAS,IAAIjB,IAAJ,CAAS,IAAT,EAAegB,CAAf,EAAkBF,CAAlB,EAAqBb,MAAM,CAACiB,KAA5B,EAAmC,IAAnC,CAAT;QACH,CAFD,MAEO;UACHH,GAAG,CAACE,IAAJ,CAAS,IAAIjB,IAAJ,CAAS,IAAT,EAAegB,CAAf,EAAkBF,CAAlB,EAAqBb,MAAM,CAACkB,KAA5B,EAAmC,IAAnC,CAAT;QACH;MACJ;;MAED,KAAKV,KAAL,CAAWQ,IAAX,CAAgBF,GAAhB;IACH;EACJ;;EAEMK,YAAY,GAAU;IACzBC,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+C,KAAKV,iBAApD;IAEA,MAAMW,QAAQ,GAAG,IAAIf,KAAJ,EAAjB;IACAe,QAAQ,CAACd,KAAT,GAAiB,KAAKA,KAAtB;IACAc,QAAQ,CAACb,gBAAT,GAA4B,KAAKA,gBAAjC;IACAa,QAAQ,CAACZ,gBAAT,GAA4B,KAAKA,gBAAjC;IACAY,QAAQ,CAACX,iBAAT,GAA6B,KAAKA,iBAAlC;IACAS,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BC,QAAQ,CAACX,iBAAvC;IACA,OAAOW,QAAP;EACH;;EAEMC,cAAc,CAACC,YAAD,EAA4B;IAC7C,KAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWiB,MAA/B,EAAuCZ,CAAC,IAAI,CAA5C,EAA+C;MAC3C,MAAMC,GAAG,GAAG,KAAKN,KAAL,CAAWK,CAAX,CAAZ;;MAEA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACW,MAAxB,EAAgCV,CAAC,IAAI,CAArC,EAAwC;QACpC,MAAMW,MAAM,GAAGZ,GAAG,CAACC,CAAD,CAAlB;QAEAW,MAAM,CAACC,aAAP,CAAqBH,YAArB;MACH;IACJ;EACJ;;EAEMI,OAAO,CAACC,CAAD,EAAYC,CAAZ,EAA6B;IACvC,OAAO,KAAKtB,KAAL,CAAWsB,CAAX,EAAcD,CAAd,CAAP;EACH;;EAEME,UAAU,CAACC,KAAD,EAAgB;IAC7B,MAAMxB,KAAe,GAAG,EAAxB;;IAEA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWiB,MAA/B,EAAuCZ,CAAC,IAAI,CAA5C,EAA+C;MAC3C,MAAMC,GAAG,GAAG,KAAKN,KAAL,CAAWK,CAAX,CAAZ;;MAEA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACW,MAAxB,EAAgCV,CAAC,IAAI,CAArC,EAAwC;QACpC,MAAMkB,IAAI,GAAGnB,GAAG,CAACC,CAAD,CAAhB;;QAEA,IAAIkB,IAAI,CAACC,MAAL,IAAeD,IAAI,CAACC,MAAL,CAAYF,KAAZ,KAAsBA,KAAzC,EAAgD;UAC5CxB,KAAK,CAACQ,IAAN,CAAWiB,IAAI,CAACC,MAAhB;QACH;MACJ;IACJ;;IAED,OAAO1B,KAAP;EACH;;EAEM2B,oBAAoB,GAAG;IAC1B,KAAKxB,iBAAL,GAAyB,IAAzB;EACH;;EAEMyB,sBAAsB,GAAG;IAC5B,KAAKzB,iBAAL,GAAyB,KAAzB;EACH;;EAEO0B,QAAQ,GAAG;IACf,KAAK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;MAC3B,IAAIT,IAAJ,CAASJ,MAAM,CAACkB,KAAhB,EAAuB,KAAKU,OAAL,CAAaf,CAAb,EAAgB,CAAhB,CAAvB;MACA,IAAIT,IAAJ,CAASJ,MAAM,CAACiB,KAAhB,EAAuB,KAAKW,OAAL,CAAaf,CAAb,EAAgB,CAAhB,CAAvB;IACH;EACJ;;EAEOyB,QAAQ,GAAG;IACf,IAAIhC,IAAJ,CAASN,MAAM,CAACkB,KAAhB,EAAuB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAvB;IACA,IAAItB,IAAJ,CAASN,MAAM,CAACkB,KAAhB,EAAuB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAvB;IACA,IAAItB,IAAJ,CAASN,MAAM,CAACiB,KAAhB,EAAuB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAvB;IACA,IAAItB,IAAJ,CAASN,MAAM,CAACiB,KAAhB,EAAuB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAvB;EACH;;EAEOW,UAAU,GAAG;IACjB,IAAIpC,MAAJ,CAAWH,MAAM,CAACkB,KAAlB,EAAyB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;IACA,IAAIzB,MAAJ,CAAWH,MAAM,CAACkB,KAAlB,EAAyB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;IACA,IAAIzB,MAAJ,CAAWH,MAAM,CAACiB,KAAlB,EAAyB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;IACA,IAAIzB,MAAJ,CAAWH,MAAM,CAACiB,KAAlB,EAAyB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;EACH;;EAEOY,UAAU,GAAG;IACjB,IAAIvC,MAAJ,CAAWD,MAAM,CAACkB,KAAlB,EAAyB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;IACA,IAAI3B,MAAJ,CAAWD,MAAM,CAACkB,KAAlB,EAAyB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;IACA,IAAI3B,MAAJ,CAAWD,MAAM,CAACiB,KAAlB,EAAyB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;IACA,IAAI3B,MAAJ,CAAWD,MAAM,CAACiB,KAAlB,EAAyB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAzB;EACH;;EAEOa,SAAS,GAAG;IAChB,IAAIpC,KAAJ,CAAUL,MAAM,CAACkB,KAAjB,EAAwB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAxB;IACA,IAAIvB,KAAJ,CAAUL,MAAM,CAACiB,KAAjB,EAAwB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAxB;EACH;;EAEOc,QAAQ,GAAG;IACf,IAAIxC,IAAJ,CAASF,MAAM,CAACkB,KAAhB,EAAuB,KAAKU,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAvB;IACA,IAAI1B,IAAJ,CAASF,MAAM,CAACiB,KAAhB,EAAuB,KAAKW,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAvB;EACH;;EAEMe,UAAU,GAAG;IAChB,KAAKN,QAAL;IACA,KAAKC,QAAL;IACA,KAAKC,UAAL;IACA,KAAKC,UAAL;IACA,KAAKC,SAAL;IACA,KAAKC,QAAL;EACH;;AAzHc"},"metadata":{},"sourceType":"module"}
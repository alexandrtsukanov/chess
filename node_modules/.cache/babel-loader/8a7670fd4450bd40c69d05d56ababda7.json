{"ast":null,"code":"import { Cell } from \"./cell\";\nimport { Colors } from \"./colors\";\nimport { Bishop } from \"./figures/bishop\";\nimport { King } from \"./figures/king\";\nimport { Knight } from \"./figures/knight\";\nimport { Pawn } from \"./figures/pawn\";\nimport { Queen } from \"./figures/queen\";\nimport { Rook } from \"./figures/rook\";\nexport class Board {\n  constructor() {\n    this.cells = [];\n    this.lostBlackFigures = [];\n    this.lostWhiteFigures = [];\n  }\n\n  initCells() {\n    for (let i = 0; i < 8; i += 1) {\n      const row = [];\n\n      for (let j = 0; j < 8; j += 1) {\n        if ((i + j) % 2 === 0) {\n          row.push(new Cell(this, j, i, Colors.WHITE, null));\n        } else {\n          row.push(new Cell(this, j, i, Colors.BLACK, null));\n        }\n      }\n\n      this.cells.push(row);\n    }\n  }\n\n  getCopyBoard() {\n    const newBoard = new Board();\n    newBoard.cells = this.cells;\n    return newBoard;\n  }\n\n  highlightCells(selectedCell) {\n    for (let i = 0; i < this.cells.length; i += 1) {\n      const row = this.cells[i];\n\n      for (let j = 0; j < row.length; j += 1) {\n        var _selectedCell$figure;\n\n        const target = row[j];\n        target.available = !!(selectedCell !== null && selectedCell !== void 0 && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(target));\n      }\n    }\n  }\n\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n\n  addPawns() {\n    for (let i = 0; i < 8; i += 1) {\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n    }\n  }\n\n  addRooks() {\n    new Rook(Colors.BLACK, this.getCell(0, 0));\n    new Rook(Colors.BLACK, this.getCell(7, 0));\n    new Rook(Colors.WHITE, this.getCell(0, 7));\n    new Rook(Colors.WHITE, this.getCell(7, 7));\n  }\n\n  addKnights() {\n    new Knight(Colors.BLACK, this.getCell(1, 0));\n    new Knight(Colors.BLACK, this.getCell(6, 0));\n    new Knight(Colors.WHITE, this.getCell(1, 7));\n    new Knight(Colors.WHITE, this.getCell(6, 7));\n  }\n\n  addBishops() {\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n  }\n\n  addQueens() {\n    new Queen(Colors.BLACK, this.getCell(4, 0));\n    new Queen(Colors.WHITE, this.getCell(4, 7));\n  }\n\n  addKings() {\n    new King(Colors.BLACK, this.getCell(3, 0));\n    new King(Colors.WHITE, this.getCell(3, 7));\n  }\n\n  addFigures() {\n    this.addPawns();\n    this.addRooks();\n    this.addKnights();\n    this.addBishops();\n    this.addQueens();\n    this.addKings();\n  }\n\n}","map":{"version":3,"names":["Cell","Colors","Bishop","King","Knight","Pawn","Queen","Rook","Board","cells","lostBlackFigures","lostWhiteFigures","initCells","i","row","j","push","WHITE","BLACK","getCopyBoard","newBoard","highlightCells","selectedCell","length","target","available","figure","canMove","getCell","x","y","addPawns","addRooks","addKnights","addBishops","addQueens","addKings","addFigures"],"sources":["/Users/alextsukanov/my-projects/chess/src/models/board.ts"],"sourcesContent":["import { Cell } from \"./cell\";\nimport { Colors } from \"./colors\";\nimport { Bishop } from \"./figures/bishop\";\nimport { King } from \"./figures/king\";\nimport { Knight } from \"./figures/knight\";\nimport { Pawn } from \"./figures/pawn\";\nimport { Queen } from \"./figures/queen\";\nimport { Rook } from \"./figures/rook\";\n\nexport class Board {\n    cells: Cell[][] = [];\n    lostBlackFigures: Cell[] = [];\n    lostWhiteFigures: Cell[] = [];\n\n    public initCells() {\n        for (let i = 0; i < 8; i += 1) {\n            const row: Cell[] = [];\n\n            for (let j = 0; j < 8; j += 1) {\n                if ((i + j) % 2 === 0) {\n                    row.push(new Cell(this, j, i, Colors.WHITE, null));\n                } else {\n                    row.push(new Cell(this, j, i, Colors.BLACK, null));\n                }\n            }\n\n            this.cells.push(row);\n        }\n    }\n\n    public getCopyBoard(): Board {\n        const newBoard = new Board();\n        newBoard.cells = this.cells;\n        return newBoard;\n    }\n\n    public highlightCells(selectedCell: Cell | null) {\n        for (let i = 0; i < this.cells.length; i += 1) {\n            const row = this.cells[i];\n\n            for (let j = 0; j < row.length; j += 1) {\n                const target = row[j];\n\n                target.available = !!selectedCell?.figure?.canMove(target);\n            }\n        }\n    }\n\n    public getCell(x: number, y: number) {\n        return this.cells[y][x];\n    }    \n\n    private addPawns() {\n        for (let i = 0; i < 8; i += 1) {\n            new Pawn(Colors.BLACK, this.getCell(i, 1));\n            new Pawn(Colors.WHITE, this.getCell(i, 6));\n        }\n    }\n\n    private addRooks() {\n        new Rook(Colors.BLACK, this.getCell(0, 0));\n        new Rook(Colors.BLACK, this.getCell(7, 0));\n        new Rook(Colors.WHITE, this.getCell(0, 7));\n        new Rook(Colors.WHITE, this.getCell(7, 7));\n    }\n\n    private addKnights() {\n        new Knight(Colors.BLACK, this.getCell(1, 0));\n        new Knight(Colors.BLACK, this.getCell(6, 0));\n        new Knight(Colors.WHITE, this.getCell(1, 7));\n        new Knight(Colors.WHITE, this.getCell(6, 7));\n    }\n\n    private addBishops() {\n        new Bishop(Colors.BLACK, this.getCell(2, 0));\n        new Bishop(Colors.BLACK, this.getCell(5, 0));\n        new Bishop(Colors.WHITE, this.getCell(2, 7));\n        new Bishop(Colors.WHITE, this.getCell(5, 7));\n    }\n\n    private addQueens() {\n        new Queen(Colors.BLACK, this.getCell(4, 0));\n        new Queen(Colors.WHITE, this.getCell(4, 7));\n    }\n\n    private addKings() {\n        new King(Colors.BLACK, this.getCell(3, 0));\n        new King(Colors.WHITE, this.getCell(3, 7));\n    }\n\n    public addFigures() {\n        this.addPawns();\n        this.addRooks();\n        this.addKnights();\n        this.addBishops();\n        this.addQueens();\n        this.addKings();\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
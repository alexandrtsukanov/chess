{"ast":null,"code":"var _jsxFileName = \"/Users/alextsukanov/my-projects/chess/src/components/board/board.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport CellComponent from '../cell/cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BoardComponent = _ref => {\n  _s();\n\n  let {\n    board,\n    setBoard\n  } = _ref;\n  const [selctedCell, setSelectedCell] = useState(null);\n  useEffect(() => {\n    highlightCells();\n  }, [selctedCell]);\n\n  const click = cell => {\n    var _selctedCell$figure;\n\n    if (selctedCell && selctedCell.x !== cell.x && selctedCell.y !== cell.y && (_selctedCell$figure = selctedCell.figure) !== null && _selctedCell$figure !== void 0 && _selctedCell$figure.canMove(cell)) {\n      selctedCell.moveFigure(cell);\n      setSelectedCell(null);\n    }\n\n    if (!!cell.figure) {\n      setSelectedCell(cell);\n    }\n  };\n\n  const highlightCells = () => {\n    board.highlightCells(selctedCell);\n    updateBoard();\n  };\n\n  const updateBoard = () => {\n    const newBoard = board.getCopyBoard();\n    setBoard(newBoard);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.cells.map((row, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n      children: row.map(cell => /*#__PURE__*/_jsxDEV(CellComponent, {\n        cell: cell,\n        selected: cell.x === (selctedCell === null || selctedCell === void 0 ? void 0 : selctedCell.x) && cell.y === (selctedCell === null || selctedCell === void 0 ? void 0 : selctedCell.y),\n        click: click\n      }, cell.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }, this))\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BoardComponent, \"jSfVAIRTO0aiDld2qwovJ6u/Vxg=\");\n\n_c = BoardComponent;\nexport default BoardComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","Fragment","useEffect","useState","CellComponent","BoardComponent","board","setBoard","selctedCell","setSelectedCell","highlightCells","click","cell","x","y","figure","canMove","moveFigure","updateBoard","newBoard","getCopyBoard","cells","map","row","index","id"],"sources":["/Users/alextsukanov/my-projects/chess/src/components/board/board.tsx"],"sourcesContent":["import React, { FC, Fragment, useEffect, useState } from 'react';\nimport { Board } from '../../models/board';\nimport CellComponent from '../cell/cell';\nimport { Cell } from '../../models/cell';\n\ninterface Props {\n    board: Board;\n    setBoard: (board: Board) => void;\n}\n\nconst BoardComponent: FC<Props> = ({board, setBoard}) => {\n    const [selctedCell, setSelectedCell] = useState<Cell | null>(null);\n\n    useEffect(() => {\n        highlightCells();\n    }, [selctedCell]);\n\n    const click = (cell: Cell) => {\n        if (\n            selctedCell && \n            selctedCell.x !== cell.x && selctedCell.y !== cell.y && \n            selctedCell.figure?.canMove(cell)\n        ) {\n            selctedCell.moveFigure(cell);\n            setSelectedCell(null);\n        }\n        if (!!cell.figure) {\n            setSelectedCell(cell);\n        }\n    };\n\n    const highlightCells = () => {\n        board.highlightCells(selctedCell);\n        updateBoard();\n    };\n\n    const updateBoard = () => {\n        const newBoard = board.getCopyBoard();\n        setBoard(newBoard);\n    };\n\n    return (\n        <div className=\"board\">\n            {board.cells.map((row, index) => (\n                <Fragment key={index}>\n                    {row.map(cell => (\n                        <CellComponent\n                            cell={cell}\n                            selected={cell.x === selctedCell?.x && cell.y === selctedCell?.y}\n                            click={click}\n                            key={cell.id}\n                        />\n                    ))}\n                </Fragment>\n            ))}\n        </div>\n    );\n}\n\nexport default BoardComponent;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,QAApB,EAA8BC,SAA9B,EAAyCC,QAAzC,QAAyD,OAAzD;AAEA,OAAOC,aAAP,MAA0B,cAA1B;;;AAQA,MAAMC,cAAyB,GAAG,QAAuB;EAAA;;EAAA,IAAtB;IAACC,KAAD;IAAQC;EAAR,CAAsB;EACrD,MAAM,CAACC,WAAD,EAAcC,eAAd,IAAiCN,QAAQ,CAAc,IAAd,CAA/C;EAEAD,SAAS,CAAC,MAAM;IACZQ,cAAc;EACjB,CAFQ,EAEN,CAACF,WAAD,CAFM,CAAT;;EAIA,MAAMG,KAAK,GAAIC,IAAD,IAAgB;IAAA;;IAC1B,IACIJ,WAAW,IACXA,WAAW,CAACK,CAAZ,KAAkBD,IAAI,CAACC,CADvB,IAC4BL,WAAW,CAACM,CAAZ,KAAkBF,IAAI,CAACE,CADnD,2BAEAN,WAAW,CAACO,MAFZ,gDAEA,oBAAoBC,OAApB,CAA4BJ,IAA5B,CAHJ,EAIE;MACEJ,WAAW,CAACS,UAAZ,CAAuBL,IAAvB;MACAH,eAAe,CAAC,IAAD,CAAf;IACH;;IACD,IAAI,CAAC,CAACG,IAAI,CAACG,MAAX,EAAmB;MACfN,eAAe,CAACG,IAAD,CAAf;IACH;EACJ,CAZD;;EAcA,MAAMF,cAAc,GAAG,MAAM;IACzBJ,KAAK,CAACI,cAAN,CAAqBF,WAArB;IACAU,WAAW;EACd,CAHD;;EAKA,MAAMA,WAAW,GAAG,MAAM;IACtB,MAAMC,QAAQ,GAAGb,KAAK,CAACc,YAAN,EAAjB;IACAb,QAAQ,CAACY,QAAD,CAAR;EACH,CAHD;;EAKA,oBACI;IAAK,SAAS,EAAC,OAAf;IAAA,UACKb,KAAK,CAACe,KAAN,CAAYC,GAAZ,CAAgB,CAACC,GAAD,EAAMC,KAAN,kBACb,QAAC,QAAD;MAAA,UACKD,GAAG,CAACD,GAAJ,CAAQV,IAAI,iBACT,QAAC,aAAD;QACI,IAAI,EAAEA,IADV;QAEI,QAAQ,EAAEA,IAAI,CAACC,CAAL,MAAWL,WAAX,aAAWA,WAAX,uBAAWA,WAAW,CAAEK,CAAxB,KAA6BD,IAAI,CAACE,CAAL,MAAWN,WAAX,aAAWA,WAAX,uBAAWA,WAAW,CAAEM,CAAxB,CAF3C;QAGI,KAAK,EAAEH;MAHX,GAISC,IAAI,CAACa,EAJd;QAAA;QAAA;QAAA;MAAA,QADH;IADL,GAAeD,KAAf;MAAA;MAAA;MAAA;IAAA,QADH;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAgBH,CA/CD;;GAAMnB,c;;KAAAA,c;AAiDN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/alextsukanov/my-projects/chess/src/components/board/board.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BoardComponent = _ref => {\n  _s();\n\n  let {\n    board,\n    setBoard,\n    currentPlayer,\n    swapPlayer\n  } = _ref;\n  const [selectedCell, setSelectedCell] = useState(null);\n  useEffect(() => {\n    highlightCells();\n  }, [selectedCell]);\n\n  const click = cell => {\n    var _selectedCell$figure;\n\n    if (selectedCell && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(cell)) {\n      selectedCell.moveFigure(cell);\n      swapPlayer();\n      setSelectedCell(null);\n    } else {\n      var _cell$figure;\n\n      if (!!cell.figure && ((_cell$figure = cell.figure) === null || _cell$figure === void 0 ? void 0 : _cell$figure.color) === (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color)) {\n        setSelectedCell(cell);\n      }\n    }\n  };\n\n  const highlightCells = () => {\n    board.highlightCells(selectedCell);\n    updateBoard();\n  };\n\n  const updateBoard = () => {\n    const newBoard = board.getCopyBoard();\n    setBoard(newBoard);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BoardComponent, \"OFVjm5mk704+5WCzFQLJg89Ag6Q=\");\n\n_c = BoardComponent;\nexport default BoardComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","useEffect","useState","BoardComponent","board","setBoard","currentPlayer","swapPlayer","selectedCell","setSelectedCell","highlightCells","click","cell","figure","canMove","moveFigure","color","updateBoard","newBoard","getCopyBoard"],"sources":["/Users/alextsukanov/my-projects/chess/src/components/board/board.tsx"],"sourcesContent":["import React, { FC, Fragment, useEffect, useState } from 'react';\nimport { Board } from '../../models/board';\nimport CellComponent from '../cell/cell';\nimport { Cell } from '../../models/cell';\nimport { Player } from '../../models/player';\n\ninterface Props {\n    board: Board;\n    setBoard: (board: Board) => void;\n    currentPlayer: Player | null;\n    swapPlayer: () => void;\n}\n\nconst BoardComponent: FC<Props> = ({board, setBoard, currentPlayer, swapPlayer}) => {\n    const [selectedCell, setSelectedCell] = useState<Cell | null>(null);\n\n    useEffect(() => {\n        highlightCells();\n    }, [selectedCell]);\n\n    const click = (cell: Cell) => {\n        if (selectedCell && selectedCell.figure?.canMove(cell)) {\n            selectedCell.moveFigure(cell);\n            swapPlayer();\n            setSelectedCell(null);\n        } else {\n            if (!!cell.figure && cell.figure?.color === currentPlayer?.color) {\n                setSelectedCell(cell);\n            }\n        }\n    };\n\n    const highlightCells = () => {\n        board.highlightCells(selectedCell);\n        updateBoard();\n    };\n\n    const updateBoard = () => {\n        const newBoard = board.getCopyBoard();\n        setBoard(newBoard);\n    };\n\n    return (\n        <div>\n            {/* <h3>Current player: {currentPlayer?.color ?? ''}</h3> */}\n\n            {/* <div className=\"board\">\n                {board.cells.map((row, index) => (\n                    <Fragment key={index}>\n                        {row.map(cell => (\n                            <CellComponent\n                                cell={cell}\n                                selected={cell.x === selectedCell?.x && cell.y === selectedCell?.y}\n                                click={click}\n                                key={cell.id}\n                            />\n                        ))}\n                    </Fragment>\n                ))}\n            </div> */}\n        </div>\n    );\n}\n\nexport default BoardComponent;"],"mappings":";;;AAAA,OAAOA,KAAP,IAA8BC,SAA9B,EAAyCC,QAAzC,QAAyD,OAAzD;;;AAaA,MAAMC,cAAyB,GAAG,QAAkD;EAAA;;EAAA,IAAjD;IAACC,KAAD;IAAQC,QAAR;IAAkBC,aAAlB;IAAiCC;EAAjC,CAAiD;EAChF,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAc,IAAd,CAAhD;EAEAD,SAAS,CAAC,MAAM;IACZS,cAAc;EACjB,CAFQ,EAEN,CAACF,YAAD,CAFM,CAAT;;EAIA,MAAMG,KAAK,GAAIC,IAAD,IAAgB;IAAA;;IAC1B,IAAIJ,YAAY,4BAAIA,YAAY,CAACK,MAAjB,iDAAI,qBAAqBC,OAArB,CAA6BF,IAA7B,CAApB,EAAwD;MACpDJ,YAAY,CAACO,UAAb,CAAwBH,IAAxB;MACAL,UAAU;MACVE,eAAe,CAAC,IAAD,CAAf;IACH,CAJD,MAIO;MAAA;;MACH,IAAI,CAAC,CAACG,IAAI,CAACC,MAAP,IAAiB,iBAAAD,IAAI,CAACC,MAAL,8DAAaG,KAAb,OAAuBV,aAAvB,aAAuBA,aAAvB,uBAAuBA,aAAa,CAAEU,KAAtC,CAArB,EAAkE;QAC9DP,eAAe,CAACG,IAAD,CAAf;MACH;IACJ;EACJ,CAVD;;EAYA,MAAMF,cAAc,GAAG,MAAM;IACzBN,KAAK,CAACM,cAAN,CAAqBF,YAArB;IACAS,WAAW;EACd,CAHD;;EAKA,MAAMA,WAAW,GAAG,MAAM;IACtB,MAAMC,QAAQ,GAAGd,KAAK,CAACe,YAAN,EAAjB;IACAd,QAAQ,CAACa,QAAD,CAAR;EACH,CAHD;;EAKA,oBACI;IAAA;IAAA;IAAA;EAAA,QADJ;AAoBH,CAjDD;;GAAMf,c;;KAAAA,c;AAmDN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}
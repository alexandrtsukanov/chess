{"ast":null,"code":"export class Cell {\n  constructor(board, x, y, color, figure) {\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.figure = void 0;\n    this.board = void 0;\n    this.available = void 0;\n    this.id = void 0;\n    this.board = board;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.figure = figure;\n    this.available = false;\n    this.id = Math.random();\n  }\n\n  isEmpty() {\n    return this.figure === null;\n  }\n\n  isEmptyVertical(target) {\n    if (this.x !== target.x) {\n      return false;\n    }\n\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n\n    for (let y = min + 1; y < max; y += 1) {\n      if (!this.board.getCell(this.x, y).isEmpty()) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isEmptyHorizontal(target) {\n    if (this.y !== target.y) {\n      return false;\n    }\n\n    const min = Math.min(this.x, target.x);\n    const max = Math.max(this.x, target.x);\n\n    for (let x = min + 1; x < max; x += 1) {\n      if (!this.board.getCell(x, this.y).isEmpty()) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isEmptyDiagonal(target) {}\n\n  setFigure(figure) {\n    this.figure = figure;\n    this.figure.cell = this;\n  }\n\n  moveFigure(target) {\n    if (this.figure && this.figure.canMove(target)) {\n      this.figure.moveFigure(target);\n      target.setFigure(this.figure);\n      this.figure = null;\n    }\n  }\n\n}","map":{"version":3,"names":["Cell","constructor","board","x","y","color","figure","available","id","Math","random","isEmpty","isEmptyVertical","target","min","max","getCell","isEmptyHorizontal","isEmptyDiagonal","setFigure","cell","moveFigure","canMove"],"sources":["/Users/alextsukanov/my-projects/chess/src/models/cell.ts"],"sourcesContent":["import { Board } from \"./board\";\nimport { Colors } from \"./colors\";\nimport { Figure } from \"./figure\";\n\nexport class Cell {\n    readonly x: number;\n    readonly y: number;\n    readonly color: Colors;\n    figure: Figure | null;\n    board: Board;\n    available: boolean;\n    id: number;\n\n    constructor(board: Board, x: number, y: number, color: Colors, figure: Figure | null) {\n        this.board = board;\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.figure = figure;\n        this.available = false;\n        this.id = Math.random();\n    }\n\n    isEmpty(): boolean {\n        return this.figure === null;\n    }\n\n    isEmptyVertical(target: Cell): boolean {\n        if (this.x !== target.x) {\n            return false;\n        }\n\n        const min = Math.min(this.y, target.y);\n        const max = Math.max(this.y, target.y);\n\n        for (let y = min + 1; y < max; y += 1) {\n            if (!this.board.getCell(this.x, y).isEmpty()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    isEmptyHorizontal(target: Cell) {\n        if (this.y !== target.y) {\n            return false;\n        }\n\n        const min = Math.min(this.x, target.x);\n        const max = Math.max(this.x, target.x);\n\n        for (let x = min + 1; x < max; x += 1) {\n            if (!this.board.getCell(x, this.y).isEmpty()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    isEmptyDiagonal(target: Cell) {\n        \n    }\n\n    setFigure(figure: Figure) {\n        this.figure = figure;\n        this.figure.cell = this;\n    }\n\n    moveFigure(target: Cell) {\n        if (this.figure && this.figure.canMove(target)) {\n            this.figure.moveFigure(target);\n            target.setFigure(this.figure);\n            this.figure = null;\n        }\n    }\n}"],"mappings":"AAIA,OAAO,MAAMA,IAAN,CAAW;EASdC,WAAW,CAACC,KAAD,EAAeC,CAAf,EAA0BC,CAA1B,EAAqCC,KAArC,EAAoDC,MAApD,EAA2E;IAAA,KAR7EH,CAQ6E;IAAA,KAP7EC,CAO6E;IAAA,KAN7EC,KAM6E;IAAA,KALtFC,MAKsF;IAAA,KAJtFJ,KAIsF;IAAA,KAHtFK,SAGsF;IAAA,KAFtFC,EAEsF;IAClF,KAAKN,KAAL,GAAaA,KAAb;IACA,KAAKC,CAAL,GAASA,CAAT;IACA,KAAKC,CAAL,GAASA,CAAT;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,SAAL,GAAiB,KAAjB;IACA,KAAKC,EAAL,GAAUC,IAAI,CAACC,MAAL,EAAV;EACH;;EAEDC,OAAO,GAAY;IACf,OAAO,KAAKL,MAAL,KAAgB,IAAvB;EACH;;EAEDM,eAAe,CAACC,MAAD,EAAwB;IACnC,IAAI,KAAKV,CAAL,KAAWU,MAAM,CAACV,CAAtB,EAAyB;MACrB,OAAO,KAAP;IACH;;IAED,MAAMW,GAAG,GAAGL,IAAI,CAACK,GAAL,CAAS,KAAKV,CAAd,EAAiBS,MAAM,CAACT,CAAxB,CAAZ;IACA,MAAMW,GAAG,GAAGN,IAAI,CAACM,GAAL,CAAS,KAAKX,CAAd,EAAiBS,MAAM,CAACT,CAAxB,CAAZ;;IAEA,KAAK,IAAIA,CAAC,GAAGU,GAAG,GAAG,CAAnB,EAAsBV,CAAC,GAAGW,GAA1B,EAA+BX,CAAC,IAAI,CAApC,EAAuC;MACnC,IAAI,CAAC,KAAKF,KAAL,CAAWc,OAAX,CAAmB,KAAKb,CAAxB,EAA2BC,CAA3B,EAA8BO,OAA9B,EAAL,EAA8C;QAC1C,OAAO,KAAP;MACH;IACJ;;IAED,OAAO,IAAP;EACH;;EAEDM,iBAAiB,CAACJ,MAAD,EAAe;IAC5B,IAAI,KAAKT,CAAL,KAAWS,MAAM,CAACT,CAAtB,EAAyB;MACrB,OAAO,KAAP;IACH;;IAED,MAAMU,GAAG,GAAGL,IAAI,CAACK,GAAL,CAAS,KAAKX,CAAd,EAAiBU,MAAM,CAACV,CAAxB,CAAZ;IACA,MAAMY,GAAG,GAAGN,IAAI,CAACM,GAAL,CAAS,KAAKZ,CAAd,EAAiBU,MAAM,CAACV,CAAxB,CAAZ;;IAEA,KAAK,IAAIA,CAAC,GAAGW,GAAG,GAAG,CAAnB,EAAsBX,CAAC,GAAGY,GAA1B,EAA+BZ,CAAC,IAAI,CAApC,EAAuC;MACnC,IAAI,CAAC,KAAKD,KAAL,CAAWc,OAAX,CAAmBb,CAAnB,EAAsB,KAAKC,CAA3B,EAA8BO,OAA9B,EAAL,EAA8C;QAC1C,OAAO,KAAP;MACH;IACJ;;IAED,OAAO,IAAP;EACH;;EAEDO,eAAe,CAACL,MAAD,EAAe,CAE7B;;EAEDM,SAAS,CAACb,MAAD,EAAiB;IACtB,KAAKA,MAAL,GAAcA,MAAd;IACA,KAAKA,MAAL,CAAYc,IAAZ,GAAmB,IAAnB;EACH;;EAEDC,UAAU,CAACR,MAAD,EAAe;IACrB,IAAI,KAAKP,MAAL,IAAe,KAAKA,MAAL,CAAYgB,OAAZ,CAAoBT,MAApB,CAAnB,EAAgD;MAC5C,KAAKP,MAAL,CAAYe,UAAZ,CAAuBR,MAAvB;MACAA,MAAM,CAACM,SAAP,CAAiB,KAAKb,MAAtB;MACA,KAAKA,MAAL,GAAc,IAAd;IACH;EACJ;;AAxEa"},"metadata":{},"sourceType":"module"}
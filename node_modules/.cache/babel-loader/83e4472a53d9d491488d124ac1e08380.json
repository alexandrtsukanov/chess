{"ast":null,"code":"import { Colors } from \"./colors\";\nimport { FigureNames } from \"./figure\";\nexport class Cell {\n  constructor(board, x, y, color, figure) {\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.figure = void 0;\n    this.board = void 0;\n    this.available = void 0;\n    this.kingUnderAttack = void 0;\n    this.id = void 0;\n    this.board = board;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.figure = figure;\n    this.available = false;\n    this.kingUnderAttack = false;\n    this.id = Math.random();\n  }\n\n  isEmpty() {\n    return this.figure === null;\n  }\n\n  isEnemy(target) {\n    if (target.figure) {\n      var _this$figure, _target$figure;\n\n      return ((_this$figure = this.figure) === null || _this$figure === void 0 ? void 0 : _this$figure.color) !== ((_target$figure = target.figure) === null || _target$figure === void 0 ? void 0 : _target$figure.color);\n    }\n\n    return false;\n  }\n\n  isEmptyVertical(target) {\n    if (this.x !== target.x) {\n      return false;\n    }\n\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n\n    for (let y = min + 1; y < max; y += 1) {\n      if (!this.board.getCell(this.x, y).isEmpty()) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isEmptyHorizontal(target) {\n    if (this.y !== target.y) {\n      return false;\n    }\n\n    const min = Math.min(this.x, target.x);\n    const max = Math.max(this.x, target.x);\n\n    for (let x = min + 1; x < max; x += 1) {\n      if (!this.board.getCell(x, this.y).isEmpty()) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isEmptyDiagonal(target) {\n    const absX = Math.abs(this.x - target.x);\n    const absY = Math.abs(this.y - target.y);\n\n    if (absX !== absY) {\n      return false;\n    }\n\n    const dx = this.x < target.x ? 1 : -1;\n    const dy = this.y < target.y ? 1 : -1;\n\n    for (let i = 1; i < absY; i += 1) {\n      if (!this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty()) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  setFigure(figure) {\n    this.figure = figure;\n    this.figure.cell = this;\n  }\n\n  setAvailavble(sourceCell) {\n    var _sourceCell$figure, _this$figure2;\n\n    this.available = !!(sourceCell !== null && sourceCell !== void 0 && (_sourceCell$figure = sourceCell.figure) !== null && _sourceCell$figure !== void 0 && _sourceCell$figure.canMove(this)) && ((_this$figure2 = this.figure) === null || _this$figure2 === void 0 ? void 0 : _this$figure2.name) !== FigureNames.KING;\n  }\n\n  addLostFigure(figure) {\n    if (figure.color === Colors.BLACK) {\n      this.board.lostBlackFigures.push(figure);\n    } else {\n      this.board.lostWhiteFigures.push(figure);\n    }\n  }\n\n  moveFigure(target) {\n    if (this.figure && this.figure.canMove(target)) {\n      var _target$figure2;\n\n      this.board.resetIsKingUnderAttack();\n      this.figure.moveFigure();\n\n      if (!!target.figure) {\n        this.addLostFigure(target.figure);\n      }\n\n      target.setFigure(this.figure);\n      this.figure = null;\n\n      if ((_target$figure2 = target.figure) !== null && _target$figure2 !== void 0 && _target$figure2.canAttackKing()) {\n        this.board.setIsKingUnderAttack();\n      } // else {\n      // }\n\n    } // console.log('in the cell ===>', this.kingUnderAttack);\n    // this.board.setIsKingUnderAttack();\n\n  }\n\n}","map":{"version":3,"names":["Colors","FigureNames","Cell","constructor","board","x","y","color","figure","available","kingUnderAttack","id","Math","random","isEmpty","isEnemy","target","isEmptyVertical","min","max","getCell","isEmptyHorizontal","isEmptyDiagonal","absX","abs","absY","dx","dy","i","setFigure","cell","setAvailavble","sourceCell","canMove","name","KING","addLostFigure","BLACK","lostBlackFigures","push","lostWhiteFigures","moveFigure","resetIsKingUnderAttack","canAttackKing","setIsKingUnderAttack"],"sources":["/Users/alextsukanov/my-projects/chess/src/models/cell.ts"],"sourcesContent":["import { Board } from \"./board\";\nimport { Colors } from \"./colors\";\nimport { Figure, FigureNames } from \"./figure\";\n\nexport class Cell {\n    readonly x: number;\n    readonly y: number;\n    readonly color: Colors;\n    figure: Figure | null;\n    board: Board;\n    available: boolean;\n    kingUnderAttack: boolean;\n    id: number;\n\n    constructor(board: Board, x: number, y: number, color: Colors, figure: Figure | null) {\n        this.board = board;\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.figure = figure;\n\n        this.available = false;\n        this.kingUnderAttack = false;\n        this.id = Math.random();\n    }\n\n    isEmpty(): boolean {\n        return this.figure === null;\n    }\n\n    isEnemy(target: Cell): boolean {\n        if (target.figure) {\n            return this.figure?.color !== target.figure?.color;\n        }\n\n        return false;\n    }\n\n    isEmptyVertical(target: Cell): boolean {\n        if (this.x !== target.x) {\n            return false;\n        }\n\n        const min = Math.min(this.y, target.y);\n        const max = Math.max(this.y, target.y);\n\n        for (let y = min + 1; y < max; y += 1) {\n            if (!this.board.getCell(this.x, y).isEmpty()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    isEmptyHorizontal(target: Cell) {\n        if (this.y !== target.y) {\n            return false;\n        }\n\n        const min = Math.min(this.x, target.x);\n        const max = Math.max(this.x, target.x);\n\n        for (let x = min + 1; x < max; x += 1) {\n            if (!this.board.getCell(x, this.y).isEmpty()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    isEmptyDiagonal(target: Cell) {\n        const absX = Math.abs(this.x - target.x);\n        const absY = Math.abs(this.y - target.y);\n\n        if (absX !== absY) {\n            return false;\n        }\n\n        const dx = this.x < target.x ? 1 : -1;\n        const dy = this.y < target.y ? 1 : -1;\n\n        for (let i = 1; i < absY; i += 1) {\n            if (!this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty()) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    setFigure(figure: Figure) {\n        this.figure = figure;\n        this.figure.cell = this;\n    }\n\n    setAvailavble(sourceCell: Cell | null) {\n        this.available = !!sourceCell?.figure?.canMove(this) && this.figure?.name !== FigureNames.KING;\n    }\n\n    addLostFigure(figure: Figure) {\n        if (figure.color === Colors.BLACK) {\n            this.board.lostBlackFigures.push(figure);\n        } else {\n            this.board.lostWhiteFigures.push(figure);\n        }\n    }\n\n    moveFigure(target: Cell) {\n        if (this.figure && this.figure.canMove(target)) {\n            this.board.resetIsKingUnderAttack();\n            this.figure.moveFigure();\n\n            if (!!target.figure) {\n                this.addLostFigure(target.figure);\n            }\n\n            target.setFigure(this.figure);\n            this.figure = null;\n\n            if (target.figure?.canAttackKing()) {\n                this.board.setIsKingUnderAttack();\n            } \n            // else {\n\n            // }\n        }\n\n        // console.log('in the cell ===>', this.kingUnderAttack);\n\n        // this.board.setIsKingUnderAttack();\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Cell } from \"./cell\";\nimport { Colors } from \"./colors\";\nimport { FigureNames } from \"./figure\";\nimport { Bishop } from \"./figures/bishop\";\nimport { King } from \"./figures/king\";\nimport { Knight } from \"./figures/knight\";\nimport { Pawn } from \"./figures/pawn\";\nimport { Queen } from \"./figures/queen\";\nimport { Rook } from \"./figures/rook\";\nexport class Board {\n  constructor() {\n    this.cells = [];\n    this.lostBlackFigures = [];\n    this.lostWhiteFigures = [];\n    this.isShah = false;\n  }\n\n  initCells() {\n    for (let i = 0; i < 8; i += 1) {\n      const row = [];\n\n      for (let j = 0; j < 8; j += 1) {\n        if ((i + j) % 2 === 0) {\n          row.push(new Cell(this, j, i, Colors.WHITE, null));\n        } else {\n          row.push(new Cell(this, j, i, Colors.BLACK, null));\n        }\n      }\n\n      this.cells.push(row);\n    }\n  }\n\n  getCopyBoard() {\n    const newBoard = new Board();\n    newBoard.cells = this.cells;\n    newBoard.lostBlackFigures = this.lostBlackFigures;\n    newBoard.lostWhiteFigures = this.lostWhiteFigures;\n    return newBoard;\n  }\n\n  highlightCells(selectedCell) {\n    for (let i = 0; i < this.cells.length; i += 1) {\n      const row = this.cells[i];\n\n      for (let j = 0; j < row.length; j += 1) {\n        var _selectedCell$figure, _target$figure, _selectedCell$figure2, _target$figure2, _target$figure3;\n\n        const target = row[j];\n\n        if (!!(selectedCell !== null && selectedCell !== void 0 && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(target)) && ((_target$figure = target.figure) === null || _target$figure === void 0 ? void 0 : _target$figure.name) === FigureNames.KING) {\n          this.isShah = true;\n        }\n\n        target.available = !!(selectedCell !== null && selectedCell !== void 0 && (_selectedCell$figure2 = selectedCell.figure) !== null && _selectedCell$figure2 !== void 0 && _selectedCell$figure2.canMove(target)) && ((_target$figure2 = target.figure) === null || _target$figure2 === void 0 ? void 0 : _target$figure2.name) !== FigureNames.KING;\n\n        if (((_target$figure3 = target.figure) === null || _target$figure3 === void 0 ? void 0 : _target$figure3.name) === FigureNames.KING) {\n          target.available = false;\n        }\n      }\n    }\n  } // private isKingUnderAttack(target: Cell) {\n  //     return target.available && target.figure?.name === FigureNames.KING;\n  // }\n\n\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n\n  addPawns() {\n    for (let i = 0; i < 8; i += 1) {\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n    }\n  }\n\n  addRooks() {\n    new Rook(Colors.BLACK, this.getCell(0, 0));\n    new Rook(Colors.BLACK, this.getCell(7, 0));\n    new Rook(Colors.WHITE, this.getCell(0, 7));\n    new Rook(Colors.WHITE, this.getCell(7, 7));\n  }\n\n  addKnights() {\n    new Knight(Colors.BLACK, this.getCell(1, 0));\n    new Knight(Colors.BLACK, this.getCell(6, 0));\n    new Knight(Colors.WHITE, this.getCell(1, 7));\n    new Knight(Colors.WHITE, this.getCell(6, 7));\n  }\n\n  addBishops() {\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n  }\n\n  addQueens() {\n    new Queen(Colors.BLACK, this.getCell(4, 0));\n    new Queen(Colors.WHITE, this.getCell(4, 7));\n  }\n\n  addKings() {\n    new King(Colors.BLACK, this.getCell(3, 0));\n    new King(Colors.WHITE, this.getCell(3, 7));\n  }\n\n  addFigures() {\n    this.addPawns();\n    this.addRooks();\n    this.addKnights();\n    this.addBishops();\n    this.addQueens();\n    this.addKings();\n  }\n\n}","map":{"version":3,"names":["Cell","Colors","FigureNames","Bishop","King","Knight","Pawn","Queen","Rook","Board","cells","lostBlackFigures","lostWhiteFigures","isShah","initCells","i","row","j","push","WHITE","BLACK","getCopyBoard","newBoard","highlightCells","selectedCell","length","target","figure","canMove","name","KING","available","getCell","x","y","addPawns","addRooks","addKnights","addBishops","addQueens","addKings","addFigures"],"sources":["/Users/alextsukanov/my-projects/chess/src/models/board.ts"],"sourcesContent":["import { Cell } from \"./cell\";\nimport { Colors } from \"./colors\";\nimport { Figure, FigureNames } from \"./figure\";\nimport { Bishop } from \"./figures/bishop\";\nimport { King } from \"./figures/king\";\nimport { Knight } from \"./figures/knight\";\nimport { Pawn } from \"./figures/pawn\";\nimport { Queen } from \"./figures/queen\";\nimport { Rook } from \"./figures/rook\";\n\nexport class Board {\n    cells: Cell[][] = [];\n    lostBlackFigures: Figure[] = [];\n    lostWhiteFigures: Figure[] = [];\n    isShah: boolean = false;\n\n    public initCells() {\n        for (let i = 0; i < 8; i += 1) {\n            const row: Cell[] = [];\n\n            for (let j = 0; j < 8; j += 1) {\n                if ((i + j) % 2 === 0) {\n                    row.push(new Cell(this, j, i, Colors.WHITE, null));\n                } else {\n                    row.push(new Cell(this, j, i, Colors.BLACK, null));\n                }\n            }\n\n            this.cells.push(row);\n        }\n    }\n\n    public getCopyBoard(): Board {\n        const newBoard = new Board();\n        newBoard.cells = this.cells;\n        newBoard.lostBlackFigures = this.lostBlackFigures;\n        newBoard.lostWhiteFigures = this.lostWhiteFigures;\n        return newBoard;\n    }\n\n    public highlightCells(selectedCell: Cell | null) {\n        for (let i = 0; i < this.cells.length; i += 1) {\n            const row = this.cells[i];\n\n            for (let j = 0; j < row.length; j += 1) {\n                const target = row[j];\n\n                if (!!selectedCell?.figure?.canMove(target) && target.figure?.name === FigureNames.KING) {\n                    this.isShah = true;\n                }\n                target.available = !!selectedCell?.figure?.canMove(target) && target.figure?.name !== FigureNames.KING;\n                if (target.figure?.name === FigureNames.KING) {\n                    target.available = false;\n                }\n            }\n        }\n    }\n\n    // private isKingUnderAttack(target: Cell) {\n    //     return target.available && target.figure?.name === FigureNames.KING;\n    // }\n\n    public getCell(x: number, y: number) {\n        return this.cells[y][x];\n    }    \n\n    private addPawns() {\n        for (let i = 0; i < 8; i += 1) {\n            new Pawn(Colors.BLACK, this.getCell(i, 1));\n            new Pawn(Colors.WHITE, this.getCell(i, 6));\n        }\n    }\n\n    private addRooks() {\n        new Rook(Colors.BLACK, this.getCell(0, 0));\n        new Rook(Colors.BLACK, this.getCell(7, 0));\n        new Rook(Colors.WHITE, this.getCell(0, 7));\n        new Rook(Colors.WHITE, this.getCell(7, 7));\n    }\n\n    private addKnights() {\n        new Knight(Colors.BLACK, this.getCell(1, 0));\n        new Knight(Colors.BLACK, this.getCell(6, 0));\n        new Knight(Colors.WHITE, this.getCell(1, 7));\n        new Knight(Colors.WHITE, this.getCell(6, 7));\n    }\n\n    private addBishops() {\n        new Bishop(Colors.BLACK, this.getCell(2, 0));\n        new Bishop(Colors.BLACK, this.getCell(5, 0));\n        new Bishop(Colors.WHITE, this.getCell(2, 7));\n        new Bishop(Colors.WHITE, this.getCell(5, 7));\n    }\n\n    private addQueens() {\n        new Queen(Colors.BLACK, this.getCell(4, 0));\n        new Queen(Colors.WHITE, this.getCell(4, 7));\n    }\n\n    private addKings() {\n        new King(Colors.BLACK, this.getCell(3, 0));\n        new King(Colors.WHITE, this.getCell(3, 7));\n    }\n\n    public addFigures() {\n        this.addPawns();\n        this.addRooks();\n        this.addKnights();\n        this.addBishops();\n        this.addQueens();\n        this.addKings();\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
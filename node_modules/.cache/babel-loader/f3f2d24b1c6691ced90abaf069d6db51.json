{"ast":null,"code":"var _jsxFileName = \"/Users/alextsukanov/my-projects/chess/src/components/board/board.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport CellComponent from '../cell/cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BoardComponent = _ref => {\n  _s();\n\n  var _currentPlayer$color;\n\n  let {\n    board,\n    selectedCell,\n    setSelectedCell,\n    setBoard,\n    currentPlayer,\n    swapPlayer\n  } = _ref;\n  useEffect(() => {\n    highlightCells();\n  }, [selectedCell]);\n\n  const click = cell => {\n    board.setIsKingUnderAttack();\n    updateBoard(); // if (selectedCell && selectedCell.figure?.canMove(cell)) {\n    //     const isSafe = selectedCell.figure?.isSafeMove(cell);\n    //     // console.log('isSafe =>', isSafe)\n    //     if (isSafe) {\n    //         selectedCell.moveFigure(cell);\n    //         updateBoard();\n    //         swapPlayer();\n    //         setSelectedCell(null);\n    //     }\n    // } else {\n    //     if (!!cell.figure && cell.figure?.color === currentPlayer?.color) {\n    //         setSelectedCell(cell);\n    //     }\n    // }\n  };\n\n  const highlightCells = () => {\n    board.highlightCells(selectedCell);\n    updateBoard();\n  };\n\n  const updateBoard = () => {\n    const newBoard = board.getCopyBoard();\n    setBoard(newBoard);\n  }; // console.log('is shah', board.isKingUnderAttack)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Current player: \", (_currentPlayer$color = currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color) !== null && _currentPlayer$color !== void 0 ? _currentPlayer$color : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.cells.map((row, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n        children: row.map(cell => /*#__PURE__*/_jsxDEV(CellComponent, {\n          cell: cell,\n          selected: cell.x === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) && cell.y === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.y),\n          click: click\n        }, cell.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BoardComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = BoardComponent;\nexport default BoardComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","Fragment","useEffect","CellComponent","BoardComponent","board","selectedCell","setSelectedCell","setBoard","currentPlayer","swapPlayer","highlightCells","click","cell","setIsKingUnderAttack","updateBoard","newBoard","getCopyBoard","color","cells","map","row","index","x","y","id"],"sources":["/Users/alextsukanov/my-projects/chess/src/components/board/board.tsx"],"sourcesContent":["import React, { Dispatch, FC, Fragment, SetStateAction, useEffect } from 'react';\nimport { Board } from '../../models/board';\nimport CellComponent from '../cell/cell';\nimport { Cell } from '../../models/cell';\nimport { Player } from '../../models/player';\n\ninterface Props {\n    board: Board;\n    selectedCell: Cell | null;\n    setSelectedCell: Dispatch<SetStateAction<null | Cell>>;\n    setBoard: Dispatch<SetStateAction<Board>>;\n    currentPlayer: Player | null;\n    swapPlayer: () => void;\n}\n\nconst BoardComponent: FC<Props> = ({\n    board,\n    selectedCell,\n    setSelectedCell,\n    setBoard,\n    currentPlayer,\n    swapPlayer,\n}) => {\n    useEffect(() => {\n        highlightCells();\n    }, [selectedCell]);\n\n    const click = (cell: Cell) => {\n        board.setIsKingUnderAttack();\n        updateBoard()\n        // if (selectedCell && selectedCell.figure?.canMove(cell)) {\n        //     const isSafe = selectedCell.figure?.isSafeMove(cell);\n        //     // console.log('isSafe =>', isSafe)\n\n        //     if (isSafe) {\n        //         selectedCell.moveFigure(cell);\n        //         updateBoard();\n        //         swapPlayer();\n        //         setSelectedCell(null);\n        //     }\n        // } else {\n        //     if (!!cell.figure && cell.figure?.color === currentPlayer?.color) {\n        //         setSelectedCell(cell);\n        //     }\n        // }\n    };\n\n    const highlightCells = () => {\n        board.highlightCells(selectedCell);\n        updateBoard();\n    };\n\n    const updateBoard = () => {\n        const newBoard = board.getCopyBoard();\n        setBoard(newBoard);\n    };\n    // console.log('is shah', board.isKingUnderAttack)\n\n    return (\n        <div>\n            <h3>Current player: {currentPlayer?.color ?? ''}</h3>\n\n            <div className=\"board\">\n                {board.cells.map((row, index) => (\n                    <Fragment key={index}>\n                        {row.map(cell => (\n                            <CellComponent\n                                cell={cell}\n                                selected={cell.x === selectedCell?.x && cell.y === selectedCell?.y}\n                                click={click}\n                                key={cell.id}\n                            />\n                        ))}\n                    </Fragment>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default BoardComponent;"],"mappings":";;;AAAA,OAAOA,KAAP,IAA8BC,QAA9B,EAAwDC,SAAxD,QAAyE,OAAzE;AAEA,OAAOC,aAAP,MAA0B,cAA1B;;;AAaA,MAAMC,cAAyB,GAAG,QAO5B;EAAA;;EAAA;;EAAA,IAP6B;IAC/BC,KAD+B;IAE/BC,YAF+B;IAG/BC,eAH+B;IAI/BC,QAJ+B;IAK/BC,aAL+B;IAM/BC;EAN+B,CAO7B;EACFR,SAAS,CAAC,MAAM;IACZS,cAAc;EACjB,CAFQ,EAEN,CAACL,YAAD,CAFM,CAAT;;EAIA,MAAMM,KAAK,GAAIC,IAAD,IAAgB;IAC1BR,KAAK,CAACS,oBAAN;IACAC,WAAW,GAFe,CAG1B;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH,CAlBD;;EAoBA,MAAMJ,cAAc,GAAG,MAAM;IACzBN,KAAK,CAACM,cAAN,CAAqBL,YAArB;IACAS,WAAW;EACd,CAHD;;EAKA,MAAMA,WAAW,GAAG,MAAM;IACtB,MAAMC,QAAQ,GAAGX,KAAK,CAACY,YAAN,EAAjB;IACAT,QAAQ,CAACQ,QAAD,CAAR;EACH,CAHD,CA9BE,CAkCF;;;EAEA,oBACI;IAAA,wBACI;MAAA,uDAAqBP,aAArB,aAAqBA,aAArB,uBAAqBA,aAAa,CAAES,KAApC,uEAA6C,EAA7C;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAGI;MAAK,SAAS,EAAC,OAAf;MAAA,UACKb,KAAK,CAACc,KAAN,CAAYC,GAAZ,CAAgB,CAACC,GAAD,EAAMC,KAAN,kBACb,QAAC,QAAD;QAAA,UACKD,GAAG,CAACD,GAAJ,CAAQP,IAAI,iBACT,QAAC,aAAD;UACI,IAAI,EAAEA,IADV;UAEI,QAAQ,EAAEA,IAAI,CAACU,CAAL,MAAWjB,YAAX,aAAWA,YAAX,uBAAWA,YAAY,CAAEiB,CAAzB,KAA8BV,IAAI,CAACW,CAAL,MAAWlB,YAAX,aAAWA,YAAX,uBAAWA,YAAY,CAAEkB,CAAzB,CAF5C;UAGI,KAAK,EAAEZ;QAHX,GAISC,IAAI,CAACY,EAJd;UAAA;UAAA;UAAA;QAAA,QADH;MADL,GAAeH,KAAf;QAAA;QAAA;QAAA;MAAA,QADH;IADL;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAoBH,CA/DD;;GAAMlB,c;;KAAAA,c;AAiEN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}
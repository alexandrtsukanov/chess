{"ast":null,"code":"import { Cell } from \"./cell\";\nimport { Colors } from \"./colors\";\nimport { Bishop } from \"./figures/bishop\";\nimport { King } from \"./figures/king\";\nimport { Pawn } from \"./figures/pawn\";\nimport { Queen } from \"./figures/queen\";\nexport class Board {\n  constructor() {\n    this.cells = [];\n  }\n\n  initCells() {\n    for (let i = 0; i < 8; i += 1) {\n      const row = [];\n\n      for (let j = 0; j < 8; j += 1) {\n        if ((i + j) % 2 === 0) {\n          row.push(new Cell(this, j, i, Colors.WHITE, null));\n        } else {\n          row.push(new Cell(this, j, i, Colors.BLACK, null));\n        }\n      }\n\n      this.cells.push(row);\n    }\n  }\n\n  addPawns() {\n    for (let i = 0; i < 8; i += 1) {\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n    }\n  }\n\n  addRooks() {}\n\n  addKnights() {}\n\n  addBishops() {\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n  }\n\n  addQueens() {\n    new Queen(Colors.BLACK, this.getCell(4, 0));\n    new Queen(Colors.WHITE, this.getCell(4, 7));\n  }\n\n  addKings() {\n    new King(Colors.BLACK, this.getCell(3, 0));\n    new King(Colors.WHITE, this.getCell(3, 7));\n  }\n\n  addFigures() {\n    this.addPawns();\n    this.addRooks();\n    this.addKnights();\n    this.addBishops();\n    this.addQueens();\n    this.addKings();\n  }\n\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n\n}","map":{"version":3,"names":["Cell","Colors","Bishop","King","Pawn","Queen","Board","cells","initCells","i","row","j","push","WHITE","BLACK","addPawns","getCell","addRooks","addKnights","addBishops","addQueens","addKings","addFigures","x","y"],"sources":["/Users/alextsukanov/my-projects/chess/src/models/board.ts"],"sourcesContent":["import { Cell } from \"./cell\";\nimport { Colors } from \"./colors\";\nimport { Bishop } from \"./figures/bishop\";\nimport { King } from \"./figures/king\";\nimport { Pawn } from \"./figures/pawn\";\nimport { Queen } from \"./figures/queen\";\n\nexport class Board {\n    cells: Cell[][] = [];\n\n    public initCells() {\n        for (let i = 0; i < 8; i += 1) {\n            const row: Cell[] = [];\n\n            for (let j = 0; j < 8; j += 1) {\n                if ((i + j) % 2 === 0) {\n                    row.push(new Cell(this, j, i, Colors.WHITE, null));\n                } else {\n                    row.push(new Cell(this, j, i, Colors.BLACK, null));\n                }\n            }\n\n            this.cells.push(row);\n        }\n    }\n\n    private addPawns() {\n        for (let i = 0; i < 8; i += 1) {\n            new Pawn(Colors.BLACK, this.getCell(i, 1));\n            new Pawn(Colors.WHITE, this.getCell(i, 6));\n        }\n    }\n\n    private addRooks() {\n        \n    }\n\n    private addKnights() {\n        \n    }\n\n    private addBishops() {\n        new Bishop(Colors.BLACK, this.getCell(2, 0));\n        new Bishop(Colors.BLACK, this.getCell(5, 0));\n        new Bishop(Colors.WHITE, this.getCell(2, 7));\n        new Bishop(Colors.WHITE, this.getCell(5, 7));\n    }\n\n    private addQueens() {\n        new Queen(Colors.BLACK, this.getCell(4, 0));\n        new Queen(Colors.WHITE, this.getCell(4, 7));\n    }\n\n    private addKings() {\n        new King(Colors.BLACK, this.getCell(3, 0));\n        new King(Colors.WHITE, this.getCell(3, 7));\n    }\n\n    public addFigures() {\n        this.addPawns();\n        this.addRooks();\n        this.addKnights();\n        this.addBishops();\n        this.addQueens();\n        this.addKings();\n    }\n\n    public getCell(x: number, y: number) {\n        return this.cells[y][x];\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
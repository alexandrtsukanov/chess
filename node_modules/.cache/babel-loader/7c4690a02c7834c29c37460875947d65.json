{"ast":null,"code":"var _jsxFileName = \"/Users/alextsukanov/my-projects/chess/src/components/board/board.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Fragment, useCallback } from 'react';\nimport CellComponent from '../cell/cell';\nimport './board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BoardComponent = _ref => {\n  _s();\n\n  let {\n    board,\n    setBoard\n  } = _ref;\n  const [selectedCell, setSelectedCell] = useState(null);\n  const clickCellHandler = useCallback(cell => {\n    if ((selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) === cell.x && selectedCell.y === cell.y) {\n      setSelectedCell(null);\n      board.unlightenAvailableCells();\n      return;\n    }\n\n    if (cell.currentFigure) {\n      setSelectedCell(cell);\n      board.lightenAvailableCells(cell);\n    }\n\n    if (selectedCell !== null && selectedCell !== void 0 && selectedCell.currentFigure && cell.isAvailable) {\n      selectedCell.currentFigure.move(cell);\n      setBoard(board.updateBoard());\n      setSelectedCell(null);\n      board.unlightenAvailableCells();\n    }\n  }, [board, selectedCell]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.cells.map((row, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n      children: row.map(cell => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => clickCellHandler(cell),\n        className: \"board-cell\",\n        children: /*#__PURE__*/_jsxDEV(CellComponent, {\n          cell: cell,\n          isSelected: (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) === cell.x && selectedCell.y === cell.y,\n          clickHandle: clickCellHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }, this)\n      }, cell.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 25\n      }, this))\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BoardComponent, \"N8jUxxpBMAVEyaRBO3G/o5GaKmc=\");\n\n_c = BoardComponent;\nexport default BoardComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","useState","Fragment","useCallback","CellComponent","BoardComponent","board","setBoard","selectedCell","setSelectedCell","clickCellHandler","cell","x","y","unlightenAvailableCells","currentFigure","lightenAvailableCells","isAvailable","move","updateBoard","cells","map","row","index","id"],"sources":["/Users/alextsukanov/my-projects/chess/src/components/board/board.tsx"],"sourcesContent":["import React, {useMemo, useState, Fragment, useCallback} from 'react';\n\nimport {Props} from './types';\n\nimport CellComponent from '../cell/cell';\nimport { Cell } from '../../models/cell';\nimport { Nullable } from '../../consts';\n\nimport './board.css';\n\nconst BoardComponent: Props = ({board, setBoard}) => {\n    const [selectedCell, setSelectedCell] = useState<Nullable<Cell>>(null);\n    \n    const clickCellHandler = useCallback((cell: Cell) => {\n        if (selectedCell?.x === cell.x && selectedCell.y === cell.y) {\n            setSelectedCell(null);\n            board.unlightenAvailableCells();\n            return;\n        }\n        if (cell.currentFigure) {\n            setSelectedCell(cell);\n            board.lightenAvailableCells(cell);\n        }\n        if (selectedCell?.currentFigure && cell.isAvailable) {\n            selectedCell.currentFigure.move(cell);\n            setBoard(board.updateBoard());\n            setSelectedCell(null);\n            board.unlightenAvailableCells();\n        }\n    }, [board, selectedCell]);\n\n    return (\n        <div className=\"board\">\n            {board.cells.map((row, index) => (\n                <Fragment key={index}>\n                    {row.map(cell => (\n                        <div \n                            key={cell.id}\n                            onClick={() => clickCellHandler(cell)}\n                            className=\"board-cell\"\n                        >\n                            <CellComponent \n                                cell={cell}\n                                isSelected={selectedCell?.x === cell.x && selectedCell.y === cell.y}\n                                clickHandle={clickCellHandler}\n                            />\n                        </div>\n                    ))}\n                </Fragment>\n            ))}\n        </div>\n    );\n}\n\nexport default BoardComponent;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,WAA5C,QAA8D,OAA9D;AAIA,OAAOC,aAAP,MAA0B,cAA1B;AAIA,OAAO,aAAP;;;AAEA,MAAMC,cAAqB,GAAG,QAAuB;EAAA;;EAAA,IAAtB;IAACC,KAAD;IAAQC;EAAR,CAAsB;EACjD,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAiB,IAAjB,CAAhD;EAEA,MAAMS,gBAAgB,GAAGP,WAAW,CAAEQ,IAAD,IAAgB;IACjD,IAAI,CAAAH,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEI,CAAd,MAAoBD,IAAI,CAACC,CAAzB,IAA8BJ,YAAY,CAACK,CAAb,KAAmBF,IAAI,CAACE,CAA1D,EAA6D;MACzDJ,eAAe,CAAC,IAAD,CAAf;MACAH,KAAK,CAACQ,uBAAN;MACA;IACH;;IACD,IAAIH,IAAI,CAACI,aAAT,EAAwB;MACpBN,eAAe,CAACE,IAAD,CAAf;MACAL,KAAK,CAACU,qBAAN,CAA4BL,IAA5B;IACH;;IACD,IAAIH,YAAY,SAAZ,IAAAA,YAAY,WAAZ,IAAAA,YAAY,CAAEO,aAAd,IAA+BJ,IAAI,CAACM,WAAxC,EAAqD;MACjDT,YAAY,CAACO,aAAb,CAA2BG,IAA3B,CAAgCP,IAAhC;MACAJ,QAAQ,CAACD,KAAK,CAACa,WAAN,EAAD,CAAR;MACAV,eAAe,CAAC,IAAD,CAAf;MACAH,KAAK,CAACQ,uBAAN;IACH;EACJ,CAhBmC,EAgBjC,CAACR,KAAD,EAAQE,YAAR,CAhBiC,CAApC;EAkBA,oBACI;IAAK,SAAS,EAAC,OAAf;IAAA,UACKF,KAAK,CAACc,KAAN,CAAYC,GAAZ,CAAgB,CAACC,GAAD,EAAMC,KAAN,kBACb,QAAC,QAAD;MAAA,UACKD,GAAG,CAACD,GAAJ,CAAQV,IAAI,iBACT;QAEI,OAAO,EAAE,MAAMD,gBAAgB,CAACC,IAAD,CAFnC;QAGI,SAAS,EAAC,YAHd;QAAA,uBAKI,QAAC,aAAD;UACI,IAAI,EAAEA,IADV;UAEI,UAAU,EAAE,CAAAH,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEI,CAAd,MAAoBD,IAAI,CAACC,CAAzB,IAA8BJ,YAAY,CAACK,CAAb,KAAmBF,IAAI,CAACE,CAFtE;UAGI,WAAW,EAAEH;QAHjB;UAAA;UAAA;UAAA;QAAA;MALJ,GACSC,IAAI,CAACa,EADd;QAAA;QAAA;QAAA;MAAA,QADH;IADL,GAAeD,KAAf;MAAA;MAAA;MAAA;IAAA,QADH;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAqBH,CA1CD;;GAAMlB,c;;KAAAA,c;AA4CN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}
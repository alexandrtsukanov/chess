{"ast":null,"code":"export class Cell {\n  constructor(x, y, color) {\n    let figure = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let board = arguments.length > 4 ? arguments[4] : undefined;\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.currentFigure = void 0;\n    this.isAvailable = void 0;\n    this.id = void 0;\n    this.board = void 0;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.currentFigure = figure;\n    this.isAvailable = false;\n    this.id = Math.random();\n    this.board = board;\n  }\n\n  moveFigure(target) {\n    if (this.currentFigure) {\n      target.currentFigure = this.currentFigure;\n      this.currentFigure = null;\n    }\n  }\n\n  isEmpty() {\n    return this.currentFigure === null;\n  }\n\n  isEmptyHorizontal(target) {\n    if (this.y !== target.y) {\n      return false;\n    }\n\n    const min = Math.min(this.x, target.x);\n    const max = Math.max(this.x, target.x);\n\n    for (let x = min + 1; x < max; x += 1) {\n      var _this$board;\n\n      if (!((_this$board = this.board) !== null && _this$board !== void 0 && _this$board.getCell(this.y, x).isEmpty())) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isEmptyVertical(target) {\n    if (this.x !== target.x) {\n      return false;\n    }\n\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n\n    for (let y = min + 1; y < max; y += 1) {\n      var _this$board2;\n\n      if (!((_this$board2 = this.board) !== null && _this$board2 !== void 0 && _this$board2.getCell(y, this.x).isEmpty())) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isEmptyDiagonal(target) {\n    const absX = Math.abs(this.x - target.x);\n    const absY = Math.abs(this.y - target.y);\n\n    if (absX !== absY) {\n      return false;\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"names":["Cell","constructor","x","y","color","figure","board","currentFigure","isAvailable","id","Math","random","moveFigure","target","isEmpty","isEmptyHorizontal","min","max","getCell","isEmptyVertical","isEmptyDiagonal","absX","abs","absY"],"sources":["/Users/alextsukanov/my-projects/chess/src/models/cell.ts"],"sourcesContent":["import { Colors, Nullable } from \"../consts\";\nimport { Board } from \"./board\";\nimport { Figure } from \"./figure\";\n\nexport class Cell {\n    readonly x: number;\n    readonly y: number;\n    readonly color: Colors;\n    currentFigure: Nullable<Figure>;\n    isAvailable: boolean;\n    id: number;\n    board: Board;\n\n    constructor(x: number, y: number, color: Colors, figure: Nullable<Figure> = null, board: Board) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.currentFigure = figure;\n        this.isAvailable = false;\n        this.id = Math.random();\n        this.board = board;\n    }\n\n    public moveFigure(target: Cell) {\n        if (this.currentFigure) {\n            target.currentFigure = this.currentFigure;\n            this.currentFigure = null;\n        }\n    }\n\n    private isEmpty() {\n        return this.currentFigure === null;\n    }\n\n    public isEmptyHorizontal(target: Cell): boolean {\n        if (this.y !== target.y) {\n            return false;\n        }\n        const min = Math.min(this.x, target.x);\n        const max = Math.max(this.x, target.x);\n        for (let x = min + 1; x < max; x += 1) {\n            if (!this.board?.getCell(this.y, x).isEmpty()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public isEmptyVertical(target: Cell): boolean {\n        if (this.x !== target.x) {\n            return false;\n        }\n        const min = Math.min(this.y, target.y);\n        const max = Math.max(this.y, target.y);\n        for (let y = min + 1; y < max; y += 1) {\n            if (!this.board?.getCell(y, this.x).isEmpty()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public isEmptyDiagonal(target: Cell): boolean {\n        const absX = Math.abs(this.x - target.x);\n        const absY = Math.abs(this.y - target.y);\n        if (absX !== absY) {\n            return false;\n        }\n        return false;\n    }\n\n}"],"mappings":"AAIA,OAAO,MAAMA,IAAN,CAAW;EASdC,WAAW,CAACC,CAAD,EAAYC,CAAZ,EAAuBC,KAAvB,EAAqF;IAAA,IAA/CC,MAA+C,uEAApB,IAAoB;IAAA,IAAdC,KAAc;IAAA,KARvFJ,CAQuF;IAAA,KAPvFC,CAOuF;IAAA,KANvFC,KAMuF;IAAA,KALhGG,aAKgG;IAAA,KAJhGC,WAIgG;IAAA,KAHhGC,EAGgG;IAAA,KAFhGH,KAEgG;IAC5F,KAAKJ,CAAL,GAASA,CAAT;IACA,KAAKC,CAAL,GAASA,CAAT;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKG,aAAL,GAAqBF,MAArB;IACA,KAAKG,WAAL,GAAmB,KAAnB;IACA,KAAKC,EAAL,GAAUC,IAAI,CAACC,MAAL,EAAV;IACA,KAAKL,KAAL,GAAaA,KAAb;EACH;;EAEMM,UAAU,CAACC,MAAD,EAAe;IAC5B,IAAI,KAAKN,aAAT,EAAwB;MACpBM,MAAM,CAACN,aAAP,GAAuB,KAAKA,aAA5B;MACA,KAAKA,aAAL,GAAqB,IAArB;IACH;EACJ;;EAEOO,OAAO,GAAG;IACd,OAAO,KAAKP,aAAL,KAAuB,IAA9B;EACH;;EAEMQ,iBAAiB,CAACF,MAAD,EAAwB;IAC5C,IAAI,KAAKV,CAAL,KAAWU,MAAM,CAACV,CAAtB,EAAyB;MACrB,OAAO,KAAP;IACH;;IACD,MAAMa,GAAG,GAAGN,IAAI,CAACM,GAAL,CAAS,KAAKd,CAAd,EAAiBW,MAAM,CAACX,CAAxB,CAAZ;IACA,MAAMe,GAAG,GAAGP,IAAI,CAACO,GAAL,CAAS,KAAKf,CAAd,EAAiBW,MAAM,CAACX,CAAxB,CAAZ;;IACA,KAAK,IAAIA,CAAC,GAAGc,GAAG,GAAG,CAAnB,EAAsBd,CAAC,GAAGe,GAA1B,EAA+Bf,CAAC,IAAI,CAApC,EAAuC;MAAA;;MACnC,IAAI,iBAAC,KAAKI,KAAN,wCAAC,YAAYY,OAAZ,CAAoB,KAAKf,CAAzB,EAA4BD,CAA5B,EAA+BY,OAA/B,EAAD,CAAJ,EAA+C;QAC3C,OAAO,KAAP;MACH;IACJ;;IACD,OAAO,IAAP;EACH;;EAEMK,eAAe,CAACN,MAAD,EAAwB;IAC1C,IAAI,KAAKX,CAAL,KAAWW,MAAM,CAACX,CAAtB,EAAyB;MACrB,OAAO,KAAP;IACH;;IACD,MAAMc,GAAG,GAAGN,IAAI,CAACM,GAAL,CAAS,KAAKb,CAAd,EAAiBU,MAAM,CAACV,CAAxB,CAAZ;IACA,MAAMc,GAAG,GAAGP,IAAI,CAACO,GAAL,CAAS,KAAKd,CAAd,EAAiBU,MAAM,CAACV,CAAxB,CAAZ;;IACA,KAAK,IAAIA,CAAC,GAAGa,GAAG,GAAG,CAAnB,EAAsBb,CAAC,GAAGc,GAA1B,EAA+Bd,CAAC,IAAI,CAApC,EAAuC;MAAA;;MACnC,IAAI,kBAAC,KAAKG,KAAN,yCAAC,aAAYY,OAAZ,CAAoBf,CAApB,EAAuB,KAAKD,CAA5B,EAA+BY,OAA/B,EAAD,CAAJ,EAA+C;QAC3C,OAAO,KAAP;MACH;IACJ;;IACD,OAAO,IAAP;EACH;;EAEMM,eAAe,CAACP,MAAD,EAAwB;IAC1C,MAAMQ,IAAI,GAAGX,IAAI,CAACY,GAAL,CAAS,KAAKpB,CAAL,GAASW,MAAM,CAACX,CAAzB,CAAb;IACA,MAAMqB,IAAI,GAAGb,IAAI,CAACY,GAAL,CAAS,KAAKnB,CAAL,GAASU,MAAM,CAACV,CAAzB,CAAb;;IACA,IAAIkB,IAAI,KAAKE,IAAb,EAAmB;MACf,OAAO,KAAP;IACH;;IACD,OAAO,KAAP;EACH;;AAjEa"},"metadata":{},"sourceType":"module"}
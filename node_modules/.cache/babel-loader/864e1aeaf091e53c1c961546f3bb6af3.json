{"ast":null,"code":"export class Cell {\n  constructor(x, y, color) {\n    let figure = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.currentFigure = void 0;\n    this.isAvailable = void 0;\n    this.id = void 0;\n    this.board = void 0;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.currentFigure = figure;\n    this.isAvailable = false;\n    this.id = Math.random();\n  }\n\n  moveFigure(target) {\n    if (this.currentFigure) {\n      target.currentFigure = this.currentFigure;\n      this.currentFigure = null;\n    }\n  }\n\n  isEmpty() {\n    this.currentFigure === null;\n  }\n\n  isEmptyHorizontal() {}\n\n  isEmptyVertical(target) {\n    if (this.x !== target.x) {\n      return false;\n    }\n\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n\n    for (let y = min + 1; y < max; y += 1) {\n      if (this.board) {}\n    }\n  }\n\n  isEmptyDiagonal() {}\n\n}","map":{"version":3,"names":["Cell","constructor","x","y","color","figure","currentFigure","isAvailable","id","board","Math","random","moveFigure","target","isEmpty","isEmptyHorizontal","isEmptyVertical","min","max","isEmptyDiagonal"],"sources":["/Users/alextsukanov/my-projects/chess/src/models/cell.ts"],"sourcesContent":["import { Colors, Nullable } from \"../consts\";\nimport { Board } from \"./board\";\nimport { Figure } from \"./figure\";\n\nexport class Cell {\n    readonly x: number;\n    readonly y: number;\n    readonly color: Colors;\n    currentFigure: Nullable<Figure>;\n    isAvailable: boolean;\n    id: number;\n    board?: Board;\n\n    constructor(x: number, y: number, color: Colors, figure: Nullable<Figure> = null) {\n        this.x = x;\n        this.y = y;\n        this.color = color;\n        this.currentFigure = figure;\n        this.isAvailable = false;\n        this.id = Math.random();\n    }\n\n    public moveFigure(target: Cell) {\n        if (this.currentFigure) {\n            target.currentFigure = this.currentFigure;\n            this.currentFigure = null;\n        }\n    }\n\n    private isEmpty() {\n        this.currentFigure === null;\n    }\n\n    protected isEmptyHorizontal() {\n\n    }\n\n    protected isEmptyVertical(target: Cell) {\n        if (this.x !== target.x) {\n            return false;\n        }\n        const min = Math.min(this.y, target.y);\n        const max = Math.max(this.y, target.y);\n        for (let y = min + 1; y < max; y += 1) {\n            if (this.board) {\n\n            }\n        }\n    }\n\n    protected isEmptyDiagonal() {\n\n    }\n}"],"mappings":"AAIA,OAAO,MAAMA,IAAN,CAAW;EASdC,WAAW,CAACC,CAAD,EAAYC,CAAZ,EAAuBC,KAAvB,EAAuE;IAAA,IAAjCC,MAAiC,uEAAN,IAAM;IAAA,KARzEH,CAQyE;IAAA,KAPzEC,CAOyE;IAAA,KANzEC,KAMyE;IAAA,KALlFE,aAKkF;IAAA,KAJlFC,WAIkF;IAAA,KAHlFC,EAGkF;IAAA,KAFlFC,KAEkF;IAC9E,KAAKP,CAAL,GAASA,CAAT;IACA,KAAKC,CAAL,GAASA,CAAT;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKE,aAAL,GAAqBD,MAArB;IACA,KAAKE,WAAL,GAAmB,KAAnB;IACA,KAAKC,EAAL,GAAUE,IAAI,CAACC,MAAL,EAAV;EACH;;EAEMC,UAAU,CAACC,MAAD,EAAe;IAC5B,IAAI,KAAKP,aAAT,EAAwB;MACpBO,MAAM,CAACP,aAAP,GAAuB,KAAKA,aAA5B;MACA,KAAKA,aAAL,GAAqB,IAArB;IACH;EACJ;;EAEOQ,OAAO,GAAG;IACd,KAAKR,aAAL,KAAuB,IAAvB;EACH;;EAESS,iBAAiB,GAAG,CAE7B;;EAESC,eAAe,CAACH,MAAD,EAAe;IACpC,IAAI,KAAKX,CAAL,KAAWW,MAAM,CAACX,CAAtB,EAAyB;MACrB,OAAO,KAAP;IACH;;IACD,MAAMe,GAAG,GAAGP,IAAI,CAACO,GAAL,CAAS,KAAKd,CAAd,EAAiBU,MAAM,CAACV,CAAxB,CAAZ;IACA,MAAMe,GAAG,GAAGR,IAAI,CAACQ,GAAL,CAAS,KAAKf,CAAd,EAAiBU,MAAM,CAACV,CAAxB,CAAZ;;IACA,KAAK,IAAIA,CAAC,GAAGc,GAAG,GAAG,CAAnB,EAAsBd,CAAC,GAAGe,GAA1B,EAA+Bf,CAAC,IAAI,CAApC,EAAuC;MACnC,IAAI,KAAKM,KAAT,EAAgB,CAEf;IACJ;EACJ;;EAESU,eAAe,GAAG,CAE3B;;AAhDa"},"metadata":{},"sourceType":"module"}